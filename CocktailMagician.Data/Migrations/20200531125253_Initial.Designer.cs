// <auto-generated />
using System;
using CocktailMagician.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200531125253_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("347c6593-b305-4a73-a34e-e64ace060429"),
                            Address = "The Savoy Strand London WC2R 0EZ",
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-large",
                            CountryId = new Guid("a926dc8e-478b-4fce-a6ae-a25e66c9a906"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(1688),
                            IsDeleted = false,
                            Name = "American Bar",
                            Phone = "+ 44 (0)20 7836 4343",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b9d8f096-8283-4f0d-b332-f3c57d351fd9"),
                            Address = "1170 BROADWAY & 28TH STREET NEW YORK",
                            BarImageURL = "https://www.theworlds50best.com/discovery/filestore/jpg/NoMadBar-NewYork-USA-03.jpg",
                            CountryId = new Guid("6b32b925-ea18-4faa-8650-fcea60d47fa8"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2261),
                            IsDeleted = false,
                            Name = "The NoMad",
                            Phone = "(347) 472-5660",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("87dc0158-623c-4491-90bc-0428461104d3"),
                            Address = "Piazza di S. Martino Ai Monti 8 00154 Roma RM",
                            BarImageURL = "https://www.puntarellarossa.it/wp/wp-content/uploads/2018/09/drink-kong-pat--850x566.jpg",
                            CountryId = new Guid("0ab329c2-264f-4cde-b915-7d9e948f68bb"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2280),
                            IsDeleted = false,
                            Name = "Drink Kong",
                            Phone = "+39 06 2348 8666",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a1a907a2-093e-4806-a8d3-a300d28ed39b"),
                            Address = "1 Cuscaden Road 249715",
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-xlarge",
                            CountryId = new Guid("c3a69fe8-b723-4898-9c8e-0f0b8aa561ab"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2291),
                            IsDeleted = false,
                            Name = "Manhattan",
                            Phone = "+65 6725 3377",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ee2e76cd-7845-460e-b371-80c47b972bc5"),
                            Address = "The Connaught Carlos Place Mayfair London",
                            BarImageURL = "https://iwillmakeualist.files.wordpress.com/2017/07/img_6198.jpg",
                            CountryId = new Guid("a926dc8e-478b-4fce-a6ae-a25e66c9a906"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2302),
                            IsDeleted = false,
                            Name = "Connaught Bar",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("30d02b3a-1cb5-4785-89e6-f81c47fa4f90"),
                            Address = "37 Aberdeen Street Central",
                            BarImageURL = "https://www.worlds50bestbars.com/filestore/jpg/TheOldManS-WORLD-2019-003.jpg",
                            CountryId = new Guid("a518016b-4594-4303-aa29-5d57a253d170"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2314),
                            IsDeleted = false,
                            Name = "The Old Man",
                            Phone = "85227031899",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a487b0d5-3b98-42d0-90a4-c4a8c3cedf6d"),
                            Address = "Calle Echegaray 21 28014 Madrid",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2017/11/European-bars.jpg",
                            CountryId = new Guid("ce6d255d-0adc-4945-a6b6-59521c40dc7b"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2325),
                            IsDeleted = false,
                            Name = "Salmon Guru",
                            Phone = "+34 910 00 61",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cb5cb9a7-f4d6-4c28-a043-c03dd91f07cc"),
                            Address = "531 Hudson St New York",
                            BarImageURL = "https://wswd-wordpress-production.s3.amazonaws.com/content/uploads/2018/08/28140308/Katana-Kitten-NYC-West-Village-bar.jpg",
                            CountryId = new Guid("6b32b925-ea18-4faa-8650-fcea60d47fa8"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2341),
                            IsDeleted = false,
                            Name = "Katana Kitten",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("58825ca5-8c62-4a39-942b-cbac5b3c3c37"),
                            Address = "Paceville Main Staircase St Julian's",
                            BarImageURL = "https://media-cdn.tripadvisor.com/media/photo-s/12/a2/9f/4c/good-food-drinks-and.jpg",
                            CountryId = new Guid("301f5f90-ea3b-406c-b024-7478f057ef67"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2353),
                            IsDeleted = false,
                            Name = "Native",
                            Phone = "+356 2138 0635",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fd2ef1ad-e065-424b-a787-cd91b7ad6033"),
                            Address = "20 Upper Ground South Bank London SE1 9PD",
                            BarImageURL = "https://static.standard.co.uk/s3fs-public/thumbnails/image/2018/04/20/17/dandelyan-london.jpg?w968",
                            CountryId = new Guid("a926dc8e-478b-4fce-a6ae-a25e66c9a906"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2363),
                            IsDeleted = false,
                            Name = "Dandelyan",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("53d5dd83-01a8-4ae2-9eac-f43750554879"),
                            Address = "",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/01/Dead-Rabbit.jpg",
                            CountryId = new Guid("6b32b925-ea18-4faa-8650-fcea60d47fa8"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2372),
                            IsDeleted = false,
                            Name = "The Dead Rabbit",
                            Phone = "+ 44 (0)20 7836 4343",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4a021849-8baa-4271-bf40-82d42f050f63"),
                            Address = "Praxitelous 30 Athens",
                            BarImageURL = "https://www.thegreekfoundation.com/wp-content/uploads/2015/07/3b-1000x666.jpg",
                            CountryId = new Guid("175b272e-2665-4d1f-a670-ce67b4b6f98a"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2385),
                            IsDeleted = false,
                            Name = "The Clumsies",
                            Phone = "+30 21 0323 2682",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("638d213b-00df-4ed2-a3a0-1726dffb342e"),
                            Address = "134 Eldridge Street New York",
                            BarImageURL = "https://cdn.vox-cdn.com/thumbor/VJquLyS0TlbhkQfJENqnPg45tyo=/21x0:228x155/920x613/filters:focal(21x0:228x155):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/38982652/2013_3_Attaboy2.0.jpg",
                            CountryId = new Guid("6b32b925-ea18-4faa-8650-fcea60d47fa8"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2395),
                            IsDeleted = false,
                            Name = "Attaboy",
                            Phone = "+36 1 792 2222",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d1b5b1a5-08c6-4d78-9ff5-87a1b0e80d39"),
                            Address = "Soho, London",
                            BarImageURL = "https://media.timeout.com/images/103972748/1024/576/image.jpg",
                            CountryId = new Guid("a926dc8e-478b-4fce-a6ae-a25e66c9a906"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2402),
                            IsDeleted = false,
                            Name = "Bar Termini",
                            Phone = "+44 20 7622 4004",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("10963921-adee-46b1-b1ff-36401e6a2f5e"),
                            Address = "579 Fuxing Zhong Lu",
                            BarImageURL = "http://www.smartshanghai.com/uploads/venues/thumbs/thumb_1553153257.jpg",
                            CountryId = new Guid("7bab26c5-86bf-4210-8f17-a4c58c5c6243"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2417),
                            IsDeleted = false,
                            Name = "Speak Low",
                            Phone = "6416 0133",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7eaba018-e11d-47e6-bb27-27c85e1448ea"),
                            Address = "60 Rue Charlot Paris",
                            BarImageURL = "https://savourexperience.com/wp-content/uploads/2016/05/little-red-door-parallax-01-the-parisianist.jpg",
                            CountryId = new Guid("2bda4427-33f0-44fa-b157-25ea54c6ebab"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2432),
                            IsDeleted = false,
                            Name = "Little Red Door",
                            Phone = "+33 1 42 71 19 32",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7fc19b7d-cce4-40f5-b297-943b466473de"),
                            Address = "8-9 Hoxton Square London",
                            BarImageURL = "https://www.top50cocktailbars.com/wp-content/uploads/2019/06/HappinessForgets3.jpg",
                            CountryId = new Guid("a926dc8e-478b-4fce-a6ae-a25e66c9a906"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2441),
                            IsDeleted = false,
                            Name = "Happiness Forgets",
                            Phone = "+44 (0) 20 7613 0325",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a4db645d-8395-4739-afe4-883a28c26fc5"),
                            Address = "500 Arguello Street Redwood City",
                            BarImageURL = "https://images.squarespace-cdn.com/content/v1/5a0bb36d6f4ca3bf77c236b1/1523588347811-6GO1NX5NIL150ZVGA1YV/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/_GU89474.jpg?format=1000w",
                            CountryId = new Guid("2bf0add9-d434-49bf-a589-a920f814bcb7"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2493),
                            IsDeleted = false,
                            Name = "High Five",
                            Phone = "(844) 464-4445",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f3b8843a-7611-44ad-9fab-cf8ff6f5f1df"),
                            Address = "Av. �lvaro Obreg�n 106 Cuauht�moc",
                            BarImageURL = "https://i.vivit-tours.com/img/other/58/food-tour-roma-norte-mexico-citys-hippest-hood.jpg",
                            CountryId = new Guid("156c2814-4eb9-422f-b5ed-280339686e43"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2509),
                            IsDeleted = false,
                            Name = "Licorera Limantour",
                            Phone = "01 55 5264 4122",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d587bd9a-b940-4d8b-a859-e902353dfc80"),
                            Address = "Parkview Square",
                            BarImageURL = "https://www.traveller.com.au/content/dam/images/h/1/c/8/y/p/image.related.articleLeadwide.620x349.h1c8s1.png/1552972222305.jpg",
                            CountryId = new Guid("c3a69fe8-b723-4898-9c8e-0f0b8aa561ab"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2521),
                            IsDeleted = false,
                            Name = "Atlas",
                            Phone = "+65 6396 4466",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("934b40ad-48c9-4258-a188-8158500e3d01"),
                            Address = "79-81 MacDougal St New York",
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/dante-cocktail-bar-001.jpg",
                            CountryId = new Guid("6b32b925-ea18-4faa-8650-fcea60d47fa8"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2531),
                            IsDeleted = false,
                            Name = "Dante",
                            Phone = "01 55 5264 4122",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cd32acb1-b1d5-43b6-a4c3-e71fc78222ca"),
                            Address = "61�63. Meaden, London",
                            BarImageURL = "https://aplo.co/admin/web/uploads/space/oriolebar-1-yes.jpg",
                            CountryId = new Guid("a926dc8e-478b-4fce-a6ae-a25e66c9a906"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2540),
                            IsDeleted = false,
                            Name = "Oriole",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("30d1233e-59c4-495a-a332-7543830b79b3"),
                            Address = "2727 Indian Creek Dr. Miami Beach",
                            BarImageURL = "https://media.cntraveler.com/photos/5a70f846e2c45625a77b0834/master/w_767,c_limit/Broken-Shaker__2018FreehandLA_BrokenShaker4_WonhoFrankLee.jpg",
                            CountryId = new Guid("6b32b925-ea18-4faa-8650-fcea60d47fa8"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2550),
                            IsDeleted = false,
                            Name = "Broken Shaker",
                            Phone = "305-531-2727",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("87552164-f065-4893-9e52-2770947f14b4"),
                            Address = "52 Rue de Saintonge Paris",
                            BarImageURL = "https://wordpress.zarkov.de/wp-content/uploads/2019/09/20190908_03-Candelaria-11-Backboard-Ecke-1038x576.jpg",
                            CountryId = new Guid("2bda4427-33f0-44fa-b157-25ea54c6ebab"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2565),
                            IsDeleted = false,
                            Name = "Candelaria",
                            Phone = "+34 910 00 61",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("779d255a-0f05-4ebc-b3d0-41662facc09a"),
                            Address = "Storgata 27 Oslo",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http:/www.thespiritsbusiness.com/media/2015/11/Top-six-Europe-bars-to-visit-in-2016.jpg",
                            CountryId = new Guid("c36b4c92-e8ee-4e2b-be57-bfec8b3a04be"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2579),
                            IsDeleted = false,
                            Name = "Himkok",
                            Phone = "+47 22 42 22 02",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e6c9a1c2-2eb7-40ab-aa72-a2cc7c23551f"),
                            Address = "Point Square North Dock Dublin",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/02/The-Gibson.jpg",
                            CountryId = new Guid("a926dc8e-478b-4fce-a6ae-a25e66c9a906"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2587),
                            IsDeleted = false,
                            Name = "The Gibson",
                            Phone = "+353 1 681 5000",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8250e136-059f-48d1-b4f5-b01af314878d"),
                            Address = "304 BRUNSWICK ST",
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/bar_640_480_Black-Pearl_54b7d78180c89_5579556b49c71.jpg",
                            CountryId = new Guid("40c04295-5613-4a87-ba05-6c0152ef3ebd"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2602),
                            IsDeleted = false,
                            Name = "Black Pearl",
                            Phone = "+61 2 8624 3131",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5fa6e80f-37a6-4b92-8085-b567b4e35be9"),
                            Address = "7 Ann Siang Hill",
                            BarImageURL = "https://media.timeout.com/images/101805101/1024/576/image.jpg",
                            CountryId = new Guid("c3a69fe8-b723-4898-9c8e-0f0b8aa561ab"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 302, DateTimeKind.Utc).AddTicks(2612),
                            IsDeleted = false,
                            Name = "Operation Dagger",
                            Phone = "+39 06 2348 8666",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BarId");

                    b.HasIndex("BarId");

                    b.ToTable("BarComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("BarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0558501-cff6-4ce7-97fc-450bad470acb"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(2057),
                            ImageURL = "https://s3-eu-west-1.amazonaws.com/ballantines.com/prod/DrinkToMarket/1720/hero/1/hero_1988x994.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bacardi",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("71cd5c29-c48b-4063-856b-59e353005319"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3025),
                            ImageURL = "http://saltandwind.com/media/_versions/recipes/americano-cocktail-recipe_v_medium.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Americano",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c63e0e54-39a6-4d0a-a34b-e8fe13fac2d4"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3048),
                            ImageURL = "https://unsobered.com/wp-content/uploads/2019/04/Caipiroska01-696x364.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipiroska",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7f65d0f6-e566-4cd3-8e0e-0987bb2ace93"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3057),
                            ImageURL = "https://files2.hungryforever.com/wp-content/uploads/2018/03/23125131/caipirinha-cocktail.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipirinha",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("51056f14-00d9-44c3-9d82-f2617695c463"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3066),
                            ImageURL = "https://www.bbcgoodfood.com/sites/default/files/styles/recipe/public/recipe/recipe-image/2018/08/bramble.jpg?itok=vmHp8xTV",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bramble",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1d28c01b-064c-40d8-ade0-ab0245b746a4"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3078),
                            ImageURL = "https://mixthatdrink.com/wp-content/uploads/2009/03/black-russian-drink-1024x1536.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Black Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("45f06b1c-ddd6-47f1-9c98-99c2d1816ecd"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3088),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190816-white-russian-0119-landscape-pf-1568744178.jpg?crop=0.668xw:1.00xh;0.241xw,0&resize=980:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "White Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("bd066342-3824-4ee4-b81c-aea333bb0d54"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3097),
                            ImageURL = "https://dujour.com/wp-content/uploads/8297551ed0cc-500x600.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Barracuda",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("27b2451f-822c-4f38-a625-ee26801a3014"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3105),
                            ImageURL = "https://media02.stockfood.com/previews/NDY2OTI4NA==/00389107-Campari-Orange.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari Orange",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("caa679c2-054b-4c27-93b9-b90db4b48f65"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3118),
                            ImageURL = "https://makemeacocktail.com/images/cocktails/6868/400_601_margarita_2_2.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Margarita",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("eb3eff99-69d5-435a-9b8f-05898a511dc0"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3126),
                            ImageURL = "https://www.thespruceeats.com/thmb/AHWO_swapE-OzY_e3-Ufk2YAR2s=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/negroni-cocktail-recipe-759327-6-5b3f965b46e0fb00364f8d61.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Negroni",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("09f7a780-8d21-4475-a6f5-60248d9ced6c"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3134),
                            ImageURL = "https://www.thespruceeats.com/thmb/SZ4ZYUfFLuTxyE7QhutTS_XWgHA=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dirty-martini-cocktail-recipe-759643-15_preview-5b02f935c064710036ff4c24.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry Martini",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7c41be9b-df7f-41ef-acad-338dd87b74e8"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3142),
                            ImageURL = "https://www.spendwithpennies.com/wp-content/uploads/2019/11/Bloody-Mary-SpendWithPennies-4.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bloody Marry",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("a8e0f81d-4d26-4e5d-ac38-5ab6922cecb7"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3150),
                            ImageURL = "https://stevethebartender.com.au/wp-content/uploads/2014/06/manhattan-cocktail-recipe.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("6ae4752b-d84a-4014-982a-8fc7ce95833c"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3160),
                            ImageURL = "https://i1.wp.com/abarabove.com/wp-content/uploads/2020/02/P2-SingaporeSling.jpg?w=1080&ssl=1",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Singapore Sling",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("935ae388-a3a9-4cb8-84cd-791cfd97e4db"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3350),
                            ImageURL = "https://www.artofdrink.com/wp-content/uploads/2011/02/vesper-martini-750x500.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vesper",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("20db3326-d73f-4988-9ea5-1234b9713fd8"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3360),
                            ImageURL = "https://www.liquor.com/thmb/VMoOrrQzOV00AY3rgSK6XxOR0EE=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__09__04153106__mojito-720x720-recipe-a55b114fc99c4a64b38c9ef6d1660e20.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Mojito",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("11ce6a08-f065-4414-b8a3-2b1d79765e9a"),
                            AlcoholPercentage = 3.8999999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3373),
                            ImageURL = "https://253qv1sx4ey389p9wtpp9sj0-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Classic_Hot_Toddy-700x461.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hot Toddy",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("42e9f0fc-0922-4b32-bb0c-b3e833da4f51"),
                            AlcoholPercentage = 4.0999999999999996,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3380),
                            ImageURL = "https://cookieandkate.com/images/2017/12/french-75-recipe-2-3-768x1151.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "French 75",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("9e24fd07-9126-42b8-99e7-0ebf594d24a9"),
                            AlcoholPercentage = 4.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3389),
                            ImageURL = "https://www.thespruceeats.com/thmb/_Eo444fpQZYRfERGYBBwXZ0jqsw=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/vieux-carre-cocktail-recipe-761512-hero-6438e708bfe14454b9ff17168163b12a.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vieux Carre",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f033ce9c-10a6-4f49-a867-a2d38c7c96e8"),
                            AlcoholPercentage = 4.5,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3398),
                            ImageURL = "https://noseychef.com/wp-content/uploads/2018/04/hemingwaydaiquiri.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hemingway Daiquiri",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("869a04ea-c1d4-4d90-94eb-94ed1fa7fdfd"),
                            AlcoholPercentage = 7.2999999999999998,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3407),
                            ImageURL = "https://www.liquor.com/thmb/OdGMZLH9XqRF1_WzYCg8V_jvX38=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__05__08113350__bourbon-old-fashioned-720x720-recipe-ade6f7780c304999be3577e565c9bcdd.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Old Fashioned",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("59fb7ad4-70d3-4e02-a906-ab3a2745219c"),
                            AlcoholPercentage = 7.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3415),
                            ImageURL = "https://ik.imagekit.io/0tvlktvw2l3s5/wp-content/uploads/2017/02/DSC_1281-1024x1024.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cherry Sazerac",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("51b8bcff-8ad9-4d35-84f2-bb0b2245f24e"),
                            AlcoholPercentage = 7.4000000000000004,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3424),
                            ImageURL = "https://media.istockphoto.com/photos/raspberry-sangria-lemonade-or-mojito-picture-id918469144",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sangria Lemonade",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("d1611b30-9c54-4433-96c8-51379bf13eef"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3432),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/easter-cocktails-1583163536.jpg?crop=1.00xw:1.00xh;0,0&resize=640:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Easter Champagne",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("fead46c3-1a37-4333-85fc-15ced8b57d1a"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3441),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/orange-raspberry-mimosa-1557496595.jpg?crop=0.668xw:1.00xh;0.189xw,0.00255xh&resize=768:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange Raspberry Mimosa",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("4438f438-f1fe-4d94-8398-3907a5c7d22c"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3450),
                            ImageURL = "https://www.recipetineats.com/wp-content/uploads/2019/09/Tequila-Sunrise.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila Sunrise",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("b42e9d9a-ed21-494f-999a-0ccaea4fb547"),
                            AlcoholPercentage = 2.5,
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(3458),
                            ImageURL = "https://allfood.recipes/wp-content/uploads/2019/12/Disney-Dole-Pineapple-Whip-Margarita.jpg Dagger",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dole Whip Margarita",
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a926dc8e-478b-4fce-a6ae-a25e66c9a906"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 300, DateTimeKind.Utc).AddTicks(9608),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("6b32b925-ea18-4faa-8650-fcea60d47fa8"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(162),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Stated Of America"
                        },
                        new
                        {
                            Id = new Guid("0ab329c2-264f-4cde-b915-7d9e948f68bb"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(176),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("c3a69fe8-b723-4898-9c8e-0f0b8aa561ab"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(179),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("a518016b-4594-4303-aa29-5d57a253d170"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(182),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("ce6d255d-0adc-4945-a6b6-59521c40dc7b"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(196),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("301f5f90-ea3b-406c-b024-7478f057ef67"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(199),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("175b272e-2665-4d1f-a670-ce67b4b6f98a"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(202),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("7bab26c5-86bf-4210-8f17-a4c58c5c6243"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(204),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("2bda4427-33f0-44fa-b157-25ea54c6ebab"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(208),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("2bf0add9-d434-49bf-a589-a920f814bcb7"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(211),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("156c2814-4eb9-422f-b5ed-280339686e43"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(214),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("c36b4c92-e8ee-4e2b-be57-bfec8b3a04be"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(216),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("40c04295-5613-4a87-ba05-6c0152ef3ebd"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 301, DateTimeKind.Utc).AddTicks(221),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0c7f0d6-5e57-4f3d-ad44-d924219bc90d"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1085),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Daiquiri",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("821660dd-95c7-4c8e-a6d8-c8114f1d8c46"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1577),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9d1e51a3-1333-4fd0-8382-b6c20ffcd1b5"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1586),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vodka",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7c49d94e-969f-4580-8a0b-8fcba4dc737d"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1589),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4482a947-eab1-4b44-9963-6cd4c69ed1fa"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1592),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Whiskey",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("765da783-471e-4e07-a184-758804abed1c"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1597),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f7bff35d-6cbd-45e0-b725-97a13b15f424"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1600),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Gin",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("67197fb6-204b-4df7-918a-1119b76662fe"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1613),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2ebdf7df-5445-4199-bef0-74fcc4946423"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1616),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Rum",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7c8a6fca-463f-4c38-93d7-37a9511baf60"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1619),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sugar syrup",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("83bbe6a6-921e-4149-8ef4-544f2941882f"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1622),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Triple sec liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("37a76210-92db-4bbf-91e8-748ce96b1d82"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1625),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("eb17056b-77ed-453b-aec7-f86633df1bb0"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1628),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sweet vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6021a701-0a77-4a03-b8f0-7cf5cea9a67f"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1630),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1101650b-d00a-4e1a-a5f2-3bfaf5e18ac4"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1633),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Club soda",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("dde8fb85-1ff1-42f3-8c9d-371533941b21"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1638),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cream",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("257aefd5-2d54-4dba-9e30-6f5684810a06"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1641),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Maraschino liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4bd3baaf-dea5-4b7b-b8b3-b567c75499ce"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1645),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Brut champagne",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("66e53899-ca60-4ad2-bc33-8ac7bd011c10"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1647),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Fresh mint leaves",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("94b35be8-966a-4e05-afc0-4ace60768415"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1650),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Absinthe",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("75d9a17d-f2f6-42f1-a77a-fa4cf8bc7000"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1653),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Amaretto liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cda2858c-5186-4c5c-9cfc-7c8dfbc8e4c5"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1656),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Milk",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4d8d45a8-698d-4abb-8726-1945cccfe57d"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1658),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cachaca",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ea3a64a0-3963-4d04-be23-98d4a6329088"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1663),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Ginger Ale",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("630d43a9-45bb-4ae2-b255-cbbe8ff66a36"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1666),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Lime",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("54f60c2a-146c-4c8b-bef9-00a06032b43c"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1669),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Blue curacao liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("dc2ce2ad-3a6f-4e00-b6b2-4f3211c9f4cf"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1711),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d663f575-3655-488f-9624-c3ad2d04c815"),
                            CreatedOn = new DateTime(2020, 5, 31, 12, 52, 53, 296, DateTimeKind.Utc).AddTicks(1714),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Grapefruit juice",
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9"),
                            ConcurrencyStamp = "f6c733f3-4536-49a8-9625-feaaf0635806",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7"),
                            ConcurrencyStamp = "6733b9bb-de83-4f82-aa83-9068d381316f",
                            Name = "Magician",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb"),
                            ConcurrencyStamp = "b7d47c3a-5506-4b91-8771-f32ed57f017d",
                            Name = "Crawler",
                            NormalizedName = "CRAWLER"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8116e46-93b0-4906-abc3-f352791f74d1",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJyt8wAoq9w2V12iXPEb97ZwjJtLhS69RyASv/MaJssMGWisE/vv6OeSAWisQXUZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15CLJEKQCTLPRXMVXXNSWXZH6R6KJRRU",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c11d98e0-c04f-4e07-aef8-db8df8439490",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magician@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "magician@abv.bg",
                            NormalizedUserName = "MAGICIAN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAECcl8av48l86C+96zFet42EETyK5GXXDufCkMTjqt6dJQtH5UWwmKjwCXXypo0GXRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "MAGICIAN@ABV.BG"
                        },
                        new
                        {
                            Id = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84038a0f-b9ed-4638-bbde-f85f76c47bec",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "crawler@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "crawler@abv.bg",
                            NormalizedUserName = "CRAWLER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEK1/onJbmM9Q36a7aJWYxrLIjvEskVZ0E7fAt3ppAzRtyHAd72msErlnDU+2z8MoGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "CRAWLER@ABV.BG"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            RoleId = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9")
                        },
                        new
                        {
                            UserId = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            RoleId = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7")
                        },
                        new
                        {
                            UserId = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            RoleId = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Country", "Country")
                        .WithMany("Bars")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Bars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Bars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Comments")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarRating")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Comments")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
