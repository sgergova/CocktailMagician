// <auto-generated />
using System;
using CocktailMagician.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200530192917_CkcktailRatingFix")]
    partial class CkcktailRatingFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f6b2605-df56-4c7d-a560-1dd3baa9fc8b"),
                            Address = "The Savoy Strand London WC2R 0EZ",
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-large",
                            CountryId = new Guid("3a18a531-9bb4-4db7-b8c0-d4605305ef96"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(541),
                            IsDeleted = false,
                            Name = "American Bar",
                            Phone = "+ 44 (0)20 7836 4343",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4627c0c6-e6e0-4579-bbdc-1366326dc734"),
                            Address = "1170 BROADWAY & 28TH STREET NEW YORK",
                            BarImageURL = "https://www.theworlds50best.com/discovery/filestore/jpg/NoMadBar-NewYork-USA-03.jpg",
                            CountryId = new Guid("f092098a-dfde-4cb5-abfb-b3a649c4905b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(2514),
                            IsDeleted = false,
                            Name = "The NoMad",
                            Phone = "(347) 472-5660",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("afddc9f3-9b16-4eaa-9ca7-8e8e895eacf0"),
                            Address = "Piazza di S. Martino Ai Monti 8 00154 Roma RM",
                            BarImageURL = "https://www.puntarellarossa.it/wp/wp-content/uploads/2018/09/drink-kong-pat--850x566.jpg",
                            CountryId = new Guid("d70c3cd7-e79d-43e7-9323-ed59da543466"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(2630),
                            IsDeleted = false,
                            Name = "Drink Kong",
                            Phone = "+39 06 2348 8666",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1b7dd6bb-b08e-418a-9261-115e08fbfab1"),
                            Address = "1 Cuscaden Road 249715",
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-xlarge",
                            CountryId = new Guid("f48883ba-7c67-447f-80eb-db84e3f610e9"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(2678),
                            IsDeleted = false,
                            Name = "Manhattan",
                            Phone = "+65 6725 3377",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("27ebf159-9152-4f09-84a0-1756241799ac"),
                            Address = "The Connaught Carlos Place Mayfair London",
                            BarImageURL = "https://iwillmakeualist.files.wordpress.com/2017/07/img_6198.jpg",
                            CountryId = new Guid("3a18a531-9bb4-4db7-b8c0-d4605305ef96"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(2729),
                            IsDeleted = false,
                            Name = "Connaught Bar",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("65edee4d-d292-4c2e-849a-dc98542e33ff"),
                            Address = "37 Aberdeen Street Central",
                            BarImageURL = "https://www.worlds50bestbars.com/filestore/jpg/TheOldManS-WORLD-2019-003.jpg",
                            CountryId = new Guid("15f20859-dd58-4735-9fab-e34964abfd35"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(2802),
                            IsDeleted = false,
                            Name = "The Old Man",
                            Phone = "85227031899",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f5cfd300-b4ed-4e9d-b76e-bfef6e603889"),
                            Address = "Calle Echegaray 21 28014 Madrid",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2017/11/European-bars.jpg",
                            CountryId = new Guid("7e68d01a-57b6-4fa2-9db9-04de32ce8fc3"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(2853),
                            IsDeleted = false,
                            Name = "Salmon Guru",
                            Phone = "+34 910 00 61",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3d7f8c6f-e1de-43ce-9cf4-6ab4732dea3b"),
                            Address = "531 Hudson St New York",
                            BarImageURL = "https://wswd-wordpress-production.s3.amazonaws.com/content/uploads/2018/08/28140308/Katana-Kitten-NYC-West-Village-bar.jpg",
                            CountryId = new Guid("f092098a-dfde-4cb5-abfb-b3a649c4905b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(2898),
                            IsDeleted = false,
                            Name = "Katana Kitten",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b16bc91b-8f06-4d43-8b4c-b1840c489779"),
                            Address = "Paceville Main Staircase St Julian's",
                            BarImageURL = "https://media-cdn.tripadvisor.com/media/photo-s/12/a2/9f/4c/good-food-drinks-and.jpg",
                            CountryId = new Guid("43b19f31-cab0-464a-9406-515a4bb18275"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(2949),
                            IsDeleted = false,
                            Name = "Native",
                            Phone = "+356 2138 0635",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b8694a44-4903-4d59-bf2c-ee3fabf52bd0"),
                            Address = "20 Upper Ground South Bank London SE1 9PD",
                            BarImageURL = "https://static.standard.co.uk/s3fs-public/thumbnails/image/2018/04/20/17/dandelyan-london.jpg?w968",
                            CountryId = new Guid("3a18a531-9bb4-4db7-b8c0-d4605305ef96"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3019),
                            IsDeleted = false,
                            Name = "Dandelyan",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d779c50c-128c-4e15-93c1-47bef362988f"),
                            Address = "",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/01/Dead-Rabbit.jpg",
                            CountryId = new Guid("f092098a-dfde-4cb5-abfb-b3a649c4905b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3063),
                            IsDeleted = false,
                            Name = "The Dead Rabbit",
                            Phone = "+ 44 (0)20 7836 4343",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("46b0f9a5-2e33-4c03-a970-dcd68e7b7091"),
                            Address = "Praxitelous 30 Athens",
                            BarImageURL = "https://www.thegreekfoundation.com/wp-content/uploads/2015/07/3b-1000x666.jpg",
                            CountryId = new Guid("3ba72bf4-daa2-427b-8ee3-918d5a47652a"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3108),
                            IsDeleted = false,
                            Name = "The Clumsies",
                            Phone = "+30 21 0323 2682",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ba696f0d-bac8-4564-8362-f0e2cd201b55"),
                            Address = "134 Eldridge Street New York",
                            BarImageURL = "https://cdn.vox-cdn.com/thumbor/VJquLyS0TlbhkQfJENqnPg45tyo=/21x0:228x155/920x613/filters:focal(21x0:228x155):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/38982652/2013_3_Attaboy2.0.jpg",
                            CountryId = new Guid("f092098a-dfde-4cb5-abfb-b3a649c4905b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3157),
                            IsDeleted = false,
                            Name = "Attaboy",
                            Phone = "+36 1 792 2222",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("82abac38-0644-430e-8934-11c047ee1784"),
                            Address = "Soho, London",
                            BarImageURL = "https://media.timeout.com/images/103972748/1024/576/image.jpg",
                            CountryId = new Guid("3a18a531-9bb4-4db7-b8c0-d4605305ef96"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3197),
                            IsDeleted = false,
                            Name = "Bar Termini",
                            Phone = "+44 20 7622 4004",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6eab7982-a2c5-4ebe-af47-4eaad64b4b7f"),
                            Address = "579 Fuxing Zhong Lu",
                            BarImageURL = "http://www.smartshanghai.com/uploads/venues/thumbs/thumb_1553153257.jpg",
                            CountryId = new Guid("e86db2aa-20cb-4583-a542-d90673338897"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3255),
                            IsDeleted = false,
                            Name = "Speak Low",
                            Phone = "6416 0133",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("05dbe0ff-76d8-49f8-b97a-56a453c77294"),
                            Address = "60 Rue Charlot Paris",
                            BarImageURL = "https://savourexperience.com/wp-content/uploads/2016/05/little-red-door-parallax-01-the-parisianist.jpg",
                            CountryId = new Guid("9290b8e2-602d-42ff-a5a1-5ded061bc6ff"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3442),
                            IsDeleted = false,
                            Name = "Little Red Door",
                            Phone = "+33 1 42 71 19 32",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("18057c24-2f9d-46e2-b9f5-c8b0e9de7a02"),
                            Address = "8-9 Hoxton Square London",
                            BarImageURL = "https://www.top50cocktailbars.com/wp-content/uploads/2019/06/HappinessForgets3.jpg",
                            CountryId = new Guid("3a18a531-9bb4-4db7-b8c0-d4605305ef96"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3488),
                            IsDeleted = false,
                            Name = "Happiness Forgets",
                            Phone = "+44 (0) 20 7613 0325",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2c38963d-d24e-4d4c-939d-b9498b3a7f9c"),
                            Address = "500 Arguello Street Redwood City",
                            BarImageURL = "https://images.squarespace-cdn.com/content/v1/5a0bb36d6f4ca3bf77c236b1/1523588347811-6GO1NX5NIL150ZVGA1YV/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/_GU89474.jpg?format=1000w",
                            CountryId = new Guid("37097e05-7252-4c0e-9c31-b8ee0f3444bd"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3569),
                            IsDeleted = false,
                            Name = "High Five",
                            Phone = "(844) 464-4445",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5983ba59-b4d2-4f4b-a792-a95485490449"),
                            Address = "Av. �lvaro Obreg�n 106 Cuauht�moc",
                            BarImageURL = "https://i.vivit-tours.com/img/other/58/food-tour-roma-norte-mexico-citys-hippest-hood.jpg",
                            CountryId = new Guid("99936816-537f-4534-bf92-f1ae378489fd"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3630),
                            IsDeleted = false,
                            Name = "Licorera Limantour",
                            Phone = "01 55 5264 4122",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("386fee40-8fa7-45e5-b164-a11020ddb7f6"),
                            Address = "Parkview Square",
                            BarImageURL = "https://www.traveller.com.au/content/dam/images/h/1/c/8/y/p/image.related.articleLeadwide.620x349.h1c8s1.png/1552972222305.jpg",
                            CountryId = new Guid("f48883ba-7c67-447f-80eb-db84e3f610e9"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3677),
                            IsDeleted = false,
                            Name = "Atlas",
                            Phone = "+65 6396 4466",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("72ac75bf-1cae-42d7-ab7a-1385ba699385"),
                            Address = "79-81 MacDougal St New York",
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/dante-cocktail-bar-001.jpg",
                            CountryId = new Guid("f092098a-dfde-4cb5-abfb-b3a649c4905b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3720),
                            IsDeleted = false,
                            Name = "Dante",
                            Phone = "01 55 5264 4122",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4beca65c-2351-4ce8-8ce2-ca695e3db9a9"),
                            Address = "61�63. Meaden, London",
                            BarImageURL = "https://aplo.co/admin/web/uploads/space/oriolebar-1-yes.jpg",
                            CountryId = new Guid("3a18a531-9bb4-4db7-b8c0-d4605305ef96"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3759),
                            IsDeleted = false,
                            Name = "Oriole",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("813d9e57-baa0-4d0d-a6ba-3dcf8682c475"),
                            Address = "2727 Indian Creek Dr. Miami Beach",
                            BarImageURL = "https://media.cntraveler.com/photos/5a70f846e2c45625a77b0834/master/w_767,c_limit/Broken-Shaker__2018FreehandLA_BrokenShaker4_WonhoFrankLee.jpg",
                            CountryId = new Guid("f092098a-dfde-4cb5-abfb-b3a649c4905b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3801),
                            IsDeleted = false,
                            Name = "Broken Shaker",
                            Phone = "305-531-2727",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("36140889-3b89-4e8e-a371-76e7305c5e4a"),
                            Address = "52 Rue de Saintonge Paris",
                            BarImageURL = "https://wordpress.zarkov.de/wp-content/uploads/2019/09/20190908_03-Candelaria-11-Backboard-Ecke-1038x576.jpg",
                            CountryId = new Guid("9290b8e2-602d-42ff-a5a1-5ded061bc6ff"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3857),
                            IsDeleted = false,
                            Name = "Candelaria",
                            Phone = "+34 910 00 61",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("858bd107-e575-4cb4-8b3f-99985a3d71b5"),
                            Address = "Storgata 27 Oslo",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http:/www.thespiritsbusiness.com/media/2015/11/Top-six-Europe-bars-to-visit-in-2016.jpg",
                            CountryId = new Guid("cf327115-ec82-4761-842c-0e100cc1c5e1"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3918),
                            IsDeleted = false,
                            Name = "Himkok",
                            Phone = "+47 22 42 22 02",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("71374f8f-b346-4428-98ec-bd7f253d9411"),
                            Address = "Point Square North Dock Dublin",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/02/The-Gibson.jpg",
                            CountryId = new Guid("3a18a531-9bb4-4db7-b8c0-d4605305ef96"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(3971),
                            IsDeleted = false,
                            Name = "The Gibson",
                            Phone = "+353 1 681 5000",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("eb2a214b-ac66-4ec1-90c2-d90d29d53be2"),
                            Address = "304 BRUNSWICK ST",
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/bar_640_480_Black-Pearl_54b7d78180c89_5579556b49c71.jpg",
                            CountryId = new Guid("1d28e63b-0076-4f90-9020-94087b905e68"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(4032),
                            IsDeleted = false,
                            Name = "Black Pearl",
                            Phone = "+61 2 8624 3131",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c4585112-c231-4e3c-a58c-f4bd06f54bb9"),
                            Address = "7 Ann Siang Hill",
                            BarImageURL = "https://media.timeout.com/images/101805101/1024/576/image.jpg",
                            CountryId = new Guid("f48883ba-7c67-447f-80eb-db84e3f610e9"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 600, DateTimeKind.Utc).AddTicks(4073),
                            IsDeleted = false,
                            Name = "Operation Dagger",
                            Phone = "+39 06 2348 8666",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BarId");

                    b.HasIndex("BarId");

                    b.ToTable("BarComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("BarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb0b35ea-36f1-48fc-81fc-81c409cf3c6d"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(5329),
                            ImageURL = "https://s3-eu-west-1.amazonaws.com/ballantines.com/prod/DrinkToMarket/1720/hero/1/hero_1988x994.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bacardi",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("efcbcd89-e550-4c46-84f5-af8e004164df"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7242),
                            ImageURL = "http://saltandwind.com/media/_versions/recipes/americano-cocktail-recipe_v_medium.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Americano",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ea39755c-e87b-4594-9ba7-06f5d1504f8e"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7331),
                            ImageURL = "https://unsobered.com/wp-content/uploads/2019/04/Caipiroska01-696x364.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipiroska",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("8f442ba5-a63e-4b68-85e9-71c52acb40a3"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7369),
                            ImageURL = "https://files2.hungryforever.com/wp-content/uploads/2018/03/23125131/caipirinha-cocktail.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipirinha",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("98995afa-89ee-4633-8153-ebad7578067a"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7446),
                            ImageURL = "https://www.bbcgoodfood.com/sites/default/files/styles/recipe/public/recipe/recipe-image/2018/08/bramble.jpg?itok=vmHp8xTV",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bramble",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("cd710887-e37b-4811-8958-e0ebf6c507ef"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7498),
                            ImageURL = "https://mixthatdrink.com/wp-content/uploads/2009/03/black-russian-drink-1024x1536.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Black Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("8ae2d224-cd8d-4371-a7ae-8ef53669b85f"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7534),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190816-white-russian-0119-landscape-pf-1568744178.jpg?crop=0.668xw:1.00xh;0.241xw,0&resize=980:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "White Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("4b4ee755-dfe6-435b-b60d-70b14086a5be"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7570),
                            ImageURL = "https://dujour.com/wp-content/uploads/8297551ed0cc-500x600.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Barracuda",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("d042645b-7998-4f03-bd45-b0e56602e379"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7603),
                            ImageURL = "https://media02.stockfood.com/previews/NDY2OTI4NA==/00389107-Campari-Orange.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari Orange",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f28ed774-cd9d-4df7-805c-fd9177c9c43c"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7646),
                            ImageURL = "https://makemeacocktail.com/images/cocktails/6868/400_601_margarita_2_2.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Margarita",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7e459076-4749-446a-89e7-aaad4073266d"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7680),
                            ImageURL = "https://www.thespruceeats.com/thmb/AHWO_swapE-OzY_e3-Ufk2YAR2s=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/negroni-cocktail-recipe-759327-6-5b3f965b46e0fb00364f8d61.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Negroni",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("20a0fd6c-a728-479b-ad22-b5961d938c0e"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7876),
                            ImageURL = "https://www.thespruceeats.com/thmb/SZ4ZYUfFLuTxyE7QhutTS_XWgHA=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dirty-martini-cocktail-recipe-759643-15_preview-5b02f935c064710036ff4c24.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry Martini",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("13eabb02-a47c-4f3d-83ef-45cd4309bb60"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7932),
                            ImageURL = "https://www.spendwithpennies.com/wp-content/uploads/2019/11/Bloody-Mary-SpendWithPennies-4.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bloody Marry",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("9d882e77-cf3c-4459-a020-fb2b553f5c1e"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(7967),
                            ImageURL = "https://stevethebartender.com.au/wp-content/uploads/2014/06/manhattan-cocktail-recipe.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e8bee7c2-7e93-4561-95a4-237b65497bed"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8000),
                            ImageURL = "https://i1.wp.com/abarabove.com/wp-content/uploads/2020/02/P2-SingaporeSling.jpg?w=1080&ssl=1",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Singapore Sling",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7af2a344-28ba-411f-bdbc-35157ce31d70"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8040),
                            ImageURL = "https://www.artofdrink.com/wp-content/uploads/2011/02/vesper-martini-750x500.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vesper",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("5feda36f-7b61-427b-9fb5-32755abdd145"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8071),
                            ImageURL = "https://www.liquor.com/thmb/VMoOrrQzOV00AY3rgSK6XxOR0EE=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__09__04153106__mojito-720x720-recipe-a55b114fc99c4a64b38c9ef6d1660e20.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Mojito",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("913957bd-2a80-4bfe-923e-2edcac57c8aa"),
                            AlcoholPercentage = 3.8999999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8111),
                            ImageURL = "https://253qv1sx4ey389p9wtpp9sj0-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Classic_Hot_Toddy-700x461.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hot Toddy",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c41df1ec-2325-4b12-9a40-278e2388635f"),
                            AlcoholPercentage = 4.0999999999999996,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8141),
                            ImageURL = "https://cookieandkate.com/images/2017/12/french-75-recipe-2-3-768x1151.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "French 75",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("6636c210-793b-4ef9-97f8-5d7c7454c171"),
                            AlcoholPercentage = 4.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8171),
                            ImageURL = "https://www.thespruceeats.com/thmb/_Eo444fpQZYRfERGYBBwXZ0jqsw=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/vieux-carre-cocktail-recipe-761512-hero-6438e708bfe14454b9ff17168163b12a.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vieux Carre",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ae4b7f04-6fae-4b41-8db3-94e8bac8ad55"),
                            AlcoholPercentage = 4.5,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8211),
                            ImageURL = "https://noseychef.com/wp-content/uploads/2018/04/hemingwaydaiquiri.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hemingway Daiquiri",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("619e84e5-51b3-40e5-9a55-908369e0dc3d"),
                            AlcoholPercentage = 7.2999999999999998,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8241),
                            ImageURL = "https://www.liquor.com/thmb/OdGMZLH9XqRF1_WzYCg8V_jvX38=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__05__08113350__bourbon-old-fashioned-720x720-recipe-ade6f7780c304999be3577e565c9bcdd.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Old Fashioned",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("90e59c84-d13d-4d41-993c-bd7fdaefa97c"),
                            AlcoholPercentage = 7.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8273),
                            ImageURL = "https://ik.imagekit.io/0tvlktvw2l3s5/wp-content/uploads/2017/02/DSC_1281-1024x1024.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cherry Sazerac",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("a54649c5-d60f-485a-9732-ae955eff4539"),
                            AlcoholPercentage = 7.4000000000000004,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8307),
                            ImageURL = "https://media.istockphoto.com/photos/raspberry-sangria-lemonade-or-mojito-picture-id918469144",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sangria Lemonade",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("b88351b4-2fbf-49bc-a0d1-51de08393b89"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8338),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/easter-cocktails-1583163536.jpg?crop=1.00xw:1.00xh;0,0&resize=640:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Easter Champagne",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("d580f017-b2a4-4c91-9f9e-8c3e3aa11581"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8375),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/orange-raspberry-mimosa-1557496595.jpg?crop=0.668xw:1.00xh;0.189xw,0.00255xh&resize=768:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange Raspberry Mimosa",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("045716bd-a319-462a-ae26-699baed44fe8"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8407),
                            ImageURL = "https://www.recipetineats.com/wp-content/uploads/2019/09/Tequila-Sunrise.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila Sunrise",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f71dff4f-7f82-400b-9733-ba9095a52a9a"),
                            AlcoholPercentage = 2.5,
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 593, DateTimeKind.Utc).AddTicks(8437),
                            ImageURL = "https://allfood.recipes/wp-content/uploads/2019/12/Disney-Dole-Pineapple-Whip-Margarita.jpg Dagger",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dole Whip Margarita",
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a18a531-9bb4-4db7-b8c0-d4605305ef96"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(3656),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("f092098a-dfde-4cb5-abfb-b3a649c4905b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5222),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Stated Of America"
                        },
                        new
                        {
                            Id = new Guid("d70c3cd7-e79d-43e7-9323-ed59da543466"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5272),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("f48883ba-7c67-447f-80eb-db84e3f610e9"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5281),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("15f20859-dd58-4735-9fab-e34964abfd35"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5289),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("7e68d01a-57b6-4fa2-9db9-04de32ce8fc3"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5338),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("43b19f31-cab0-464a-9406-515a4bb18275"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5346),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("3ba72bf4-daa2-427b-8ee3-918d5a47652a"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5353),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("e86db2aa-20cb-4583-a542-d90673338897"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5361),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("9290b8e2-602d-42ff-a5a1-5ded061bc6ff"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5374),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("37097e05-7252-4c0e-9c31-b8ee0f3444bd"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5381),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("99936816-537f-4534-bf92-f1ae378489fd"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5389),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("cf327115-ec82-4761-842c-0e100cc1c5e1"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5540),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("1d28e63b-0076-4f90-9020-94087b905e68"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 595, DateTimeKind.Utc).AddTicks(5559),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f365f251-cb3e-457b-ab8e-7cfbf3af566c"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(2504),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Daiquiri",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7a3a2cbf-6c7a-4984-a3a0-96960ef8fdbd"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(3876),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3c07c81c-7f5a-4f2b-a999-88622480708f"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(3912),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vodka",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("74cc8c95-dd81-4900-a743-6b12e8e11421"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(3921),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4542d3d2-0791-4082-b733-c1abf979104d"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(3929),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Whiskey",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("dad9a173-ada6-4c01-92f8-07d3d8ee5b69"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(3948),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fddd5170-e21f-403e-be87-2cda0af4aca7"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(3982),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Gin",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6d8a6782-aebc-4b55-a4a4-6badd3a03484"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(3990),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("791477ce-ae71-4d60-8ba7-7bcb85c1ec6b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(3997),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Rum",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("58a6fe7e-65a5-4f54-b6a5-1380e180e97d"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4007),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sugar syrup",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("69a624b5-f3b1-4b44-9527-04b6fb69f7a2"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4014),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Triple sec liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("910374df-e73f-430d-8ee8-7c0b39d0e34d"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4021),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4233ad98-5a45-45af-84e8-fe02330453cf"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4028),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sweet vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b90ed963-a84f-4abd-9652-c572d0fd022a"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4034),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e532ebbb-7b91-4e68-913c-10aa8468703f"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4048),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Club soda",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("77b13441-db5e-4439-af40-b50badc3430b"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4055),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cream",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("811c615c-1099-486d-af64-2c88b9f3fba0"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4062),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Maraschino liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("0c6f90ff-f1cf-4a38-957f-6e0a572d3c24"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4071),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Brut champagne",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("59d6c728-0d68-468b-ac8f-53977d3abd3d"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4241),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Fresh mint leaves",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e53cbdfd-5f25-43a8-b332-cca846d3e7da"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4249),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Absinthe",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f65987f8-1f95-41b2-a51b-e9c6116096b7"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4257),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Amaretto liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9555b2e1-2eb0-42db-8240-ded80d05b447"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4266),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Milk",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("99c57467-deef-4cdf-9785-f9a126980371"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4281),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cachaca",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a85db421-faf4-4f8c-8a24-cab322580cd2"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4288),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Ginger Ale",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("0c364dbb-ea83-41f9-8591-d0c1437a6348"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4295),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Lime",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fd7dcc7f-fbc4-487c-85be-e5c5167a49d4"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4301),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Blue curacao liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("12142283-c896-4721-a6ca-9bd519f4e32d"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4307),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("65b0bc86-d851-4678-89a9-f9e27e4d2a04"),
                            CreatedOn = new DateTime(2020, 5, 30, 19, 29, 14, 588, DateTimeKind.Utc).AddTicks(4314),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Grapefruit juice",
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9"),
                            ConcurrencyStamp = "ce0f07fc-a49d-44c6-ad33-661f3ffbc0f4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7"),
                            ConcurrencyStamp = "b0f1a189-0db0-4b3f-8624-e29fbe1110a0",
                            Name = "Magician",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb"),
                            ConcurrencyStamp = "fb06d712-458f-4d27-a930-ef2a7c1c210b",
                            Name = "Crawler",
                            NormalizedName = "CRAWLER"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20c2fd63-8d0a-4cbc-aa99-0968f5469f9d",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEP6A3meMVv4tJa6UgsUgqMfBM2NbCax7kzoTRXarjZ++fu91gJh9p63vTEsnpMPA4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15CLJEKQCTLPRXMVXXNSWXZH6R6KJRRU",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "908c31ee-2c0e-4925-afc5-4eaa1f2ae6eb",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magician@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "magician@abv.bg",
                            NormalizedUserName = "MAGICIAN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDNS760MwbybggM/0g9N7rrZPAY2SWfZt2MDIiEWR4auuajZtn1NylirBlvvv/1eTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "MAGICIAN@ABV.BG"
                        },
                        new
                        {
                            Id = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f81a10a4-17f8-4f77-85ce-3b676ea92ea6",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "crawler@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "crawler@abv.bg",
                            NormalizedUserName = "CRAWLER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEI8/aTvWeAcuTG9EMhaFmMiNwSp9nkbrHRGpH2mXgzJutIeFSwiG9P7vwRfly5WZUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "CRAWLER@ABV.BG"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            RoleId = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9")
                        },
                        new
                        {
                            UserId = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            RoleId = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7")
                        },
                        new
                        {
                            UserId = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            RoleId = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Country", "Country")
                        .WithMany("Bars")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Bars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Bars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Comments")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarRating")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Comments")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
