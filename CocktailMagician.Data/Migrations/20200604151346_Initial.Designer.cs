// <auto-generated />
using System;
using CocktailMagician.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200604151346_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AverageRating")
                        .HasColumnType("int");

                    b.Property<string>("BarImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatedCount")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RatingSum")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a187555-18d3-4fe2-802d-716678048a89"),
                            Address = "The Savoy Strand London WC2R 0EZ",
                            AverageRating = 0,
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-large",
                            CountryId = new Guid("9b5f7777-2914-4ff3-8529-94ed62caa723"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(6190),
                            IsDeleted = false,
                            Name = "American Bar",
                            Phone = "+ 44 (0)20 7836 4343",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("1a144650-11f0-4d34-81fe-773cf5343387"),
                            Address = "1170 BROADWAY & 28TH STREET NEW YORK",
                            AverageRating = 0,
                            BarImageURL = "https://www.theworlds50best.com/discovery/filestore/jpg/NoMadBar-NewYork-USA-03.jpg",
                            CountryId = new Guid("fdc3a4ea-d518-4919-8402-22186a774220"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7472),
                            IsDeleted = false,
                            Name = "The NoMad",
                            Phone = "(347) 472-5660",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("430e97ab-a379-4c4f-90a7-84b8f673e450"),
                            Address = "Piazza di S. Martino Ai Monti 8 00154 Roma RM",
                            AverageRating = 0,
                            BarImageURL = "https://www.puntarellarossa.it/wp/wp-content/uploads/2018/09/drink-kong-pat--850x566.jpg",
                            CountryId = new Guid("14562ffd-94fa-4761-b76f-840f333fd7b7"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7555),
                            IsDeleted = false,
                            Name = "Drink Kong",
                            Phone = "+39 06 2348 8666",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("60c9912e-db6f-4074-a540-fea54f92f405"),
                            Address = "1 Cuscaden Road 249715",
                            AverageRating = 0,
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-xlarge",
                            CountryId = new Guid("b3c210e8-13c1-4076-94c7-2518413e66a2"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7598),
                            IsDeleted = false,
                            Name = "Manhattan",
                            Phone = "+65 6725 3377",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("a084732a-fe06-4394-9fdc-767237a12f67"),
                            Address = "The Connaught Carlos Place Mayfair London",
                            AverageRating = 0,
                            BarImageURL = "https://iwillmakeualist.files.wordpress.com/2017/07/img_6198.jpg",
                            CountryId = new Guid("9b5f7777-2914-4ff3-8529-94ed62caa723"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7638),
                            IsDeleted = false,
                            Name = "Connaught Bar",
                            Phone = "+44 (0)20 7314 3419",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("bd644f24-8c8f-436c-80ce-aa261e03521d"),
                            Address = "37 Aberdeen Street Central",
                            AverageRating = 0,
                            BarImageURL = "https://www.worlds50bestbars.com/filestore/jpg/TheOldManS-WORLD-2019-003.jpg",
                            CountryId = new Guid("c2842c3c-44fe-499d-b047-fe93305cf169"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7698),
                            IsDeleted = false,
                            Name = "The Old Man",
                            Phone = "85227031899",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("a693b421-76cb-4556-aa93-b5a5cb7623f3"),
                            Address = "Calle Echegaray 21 28014 Madrid",
                            AverageRating = 0,
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2017/11/European-bars.jpg",
                            CountryId = new Guid("add52282-4c1a-4a6a-a36e-d2eb4414704f"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7781),
                            IsDeleted = false,
                            Name = "Salmon Guru",
                            Phone = "+34 910 00 61",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("2481c582-3edd-435f-9ab7-3f8ef3608c95"),
                            Address = "531 Hudson St New York",
                            AverageRating = 0,
                            BarImageURL = "https://wswd-wordpress-production.s3.amazonaws.com/content/uploads/2018/08/28140308/Katana-Kitten-NYC-West-Village-bar.jpg",
                            CountryId = new Guid("fdc3a4ea-d518-4919-8402-22186a774220"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7823),
                            IsDeleted = false,
                            Name = "Katana Kitten",
                            Phone = "+44 (0)20 7314 3419",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("079a4808-97e3-4fe5-889d-d1060e993ea3"),
                            Address = "Paceville Main Staircase St Julian's",
                            AverageRating = 0,
                            BarImageURL = "https://media-cdn.tripadvisor.com/media/photo-s/12/a2/9f/4c/good-food-drinks-and.jpg",
                            CountryId = new Guid("4ea292b5-57af-436c-89e4-1677b93e45cb"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7889),
                            IsDeleted = false,
                            Name = "Native",
                            Phone = "+356 2138 0635",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("6f63ed06-23dd-4242-913a-c06b7d32e070"),
                            Address = "20 Upper Ground South Bank London SE1 9PD",
                            AverageRating = 0,
                            BarImageURL = "https://static.standard.co.uk/s3fs-public/thumbnails/image/2018/04/20/17/dandelyan-london.jpg?w968",
                            CountryId = new Guid("9b5f7777-2914-4ff3-8529-94ed62caa723"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7936),
                            IsDeleted = false,
                            Name = "Dandelyan",
                            Phone = "+44 (0)20 7314 3419",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("aae03569-daad-49e2-bd9e-62f90dc58b7d"),
                            Address = "",
                            AverageRating = 0,
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/01/Dead-Rabbit.jpg",
                            CountryId = new Guid("fdc3a4ea-d518-4919-8402-22186a774220"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(7985),
                            IsDeleted = false,
                            Name = "The Dead Rabbit",
                            Phone = "+ 44 (0)20 7836 4343",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("a898baf0-1ddb-4cf0-8ddc-071acb97d9eb"),
                            Address = "Praxitelous 30 Athens",
                            AverageRating = 0,
                            BarImageURL = "https://www.thegreekfoundation.com/wp-content/uploads/2015/07/3b-1000x666.jpg",
                            CountryId = new Guid("39ad8010-bd30-465f-bf0e-b952a5faa06a"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8032),
                            IsDeleted = false,
                            Name = "The Clumsies",
                            Phone = "+30 21 0323 2682",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("48854c34-a8f4-47bf-a252-4c3a9c852585"),
                            Address = "134 Eldridge Street New York",
                            AverageRating = 0,
                            BarImageURL = "https://cdn.vox-cdn.com/thumbor/VJquLyS0TlbhkQfJENqnPg45tyo=/21x0:228x155/920x613/filters:focal(21x0:228x155):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/38982652/2013_3_Attaboy2.0.jpg",
                            CountryId = new Guid("fdc3a4ea-d518-4919-8402-22186a774220"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8072),
                            IsDeleted = false,
                            Name = "Attaboy",
                            Phone = "+36 1 792 2222",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("5d3ecc02-3f3f-4a0a-86e5-c25a38a865de"),
                            Address = "Soho, London",
                            AverageRating = 0,
                            BarImageURL = "https://media.timeout.com/images/103972748/1024/576/image.jpg",
                            CountryId = new Guid("9b5f7777-2914-4ff3-8529-94ed62caa723"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8109),
                            IsDeleted = false,
                            Name = "Bar Termini",
                            Phone = "+44 20 7622 4004",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("934f958b-94a4-458d-8421-2811cc485358"),
                            Address = "579 Fuxing Zhong Lu",
                            AverageRating = 0,
                            BarImageURL = "http://www.smartshanghai.com/uploads/venues/thumbs/thumb_1553153257.jpg",
                            CountryId = new Guid("c5d3ceb6-1bab-4c9f-b627-c9db0630240d"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8166),
                            IsDeleted = false,
                            Name = "Speak Low",
                            Phone = "6416 0133",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("d1c4b0b7-a0b3-4491-8004-b4be2140f0c8"),
                            Address = "60 Rue Charlot Paris",
                            AverageRating = 0,
                            BarImageURL = "https://savourexperience.com/wp-content/uploads/2016/05/little-red-door-parallax-01-the-parisianist.jpg",
                            CountryId = new Guid("9f374d4f-8bc5-4c86-b84c-1cd8dd4d350b"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8221),
                            IsDeleted = false,
                            Name = "Little Red Door",
                            Phone = "+33 1 42 71 19 32",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("3c181bf3-cb4c-4d6c-bef7-3fe3d7faba79"),
                            Address = "8-9 Hoxton Square London",
                            AverageRating = 0,
                            BarImageURL = "https://www.top50cocktailbars.com/wp-content/uploads/2019/06/HappinessForgets3.jpg",
                            CountryId = new Guid("9b5f7777-2914-4ff3-8529-94ed62caa723"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8273),
                            IsDeleted = false,
                            Name = "Happiness Forgets",
                            Phone = "+44 (0) 20 7613 0325",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("eb1c02d7-bee6-4e36-a626-ecbcf0cfe1eb"),
                            Address = "500 Arguello Street Redwood City",
                            AverageRating = 0,
                            BarImageURL = "https://images.squarespace-cdn.com/content/v1/5a0bb36d6f4ca3bf77c236b1/1523588347811-6GO1NX5NIL150ZVGA1YV/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/_GU89474.jpg?format=1000w",
                            CountryId = new Guid("f4ebe7ed-56f1-4cdc-9d28-030ab34470e3"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8341),
                            IsDeleted = false,
                            Name = "High Five",
                            Phone = "(844) 464-4445",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("c0cb2365-8979-468d-a502-b76e9d6cd969"),
                            Address = "Av. �lvaro Obreg�n 106 Cuauht�moc",
                            AverageRating = 0,
                            BarImageURL = "https://i.vivit-tours.com/img/other/58/food-tour-roma-norte-mexico-citys-hippest-hood.jpg",
                            CountryId = new Guid("269c4119-bd6a-4245-a336-71e5d7e0cbd1"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8399),
                            IsDeleted = false,
                            Name = "Licorera Limantour",
                            Phone = "01 55 5264 4122",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("2fbc92aa-20bd-4b6a-a6b2-fe049b17c6ed"),
                            Address = "Parkview Square",
                            AverageRating = 0,
                            BarImageURL = "https://www.traveller.com.au/content/dam/images/h/1/c/8/y/p/image.related.articleLeadwide.620x349.h1c8s1.png/1552972222305.jpg",
                            CountryId = new Guid("b3c210e8-13c1-4076-94c7-2518413e66a2"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8446),
                            IsDeleted = false,
                            Name = "Atlas",
                            Phone = "+65 6396 4466",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("7b66f0d0-aea7-4401-8db5-21a14dab699f"),
                            Address = "79-81 MacDougal St New York",
                            AverageRating = 0,
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/dante-cocktail-bar-001.jpg",
                            CountryId = new Guid("fdc3a4ea-d518-4919-8402-22186a774220"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8486),
                            IsDeleted = false,
                            Name = "Dante",
                            Phone = "01 55 5264 4122",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("4a4d5593-05ab-4051-a150-ac47bd8acfef"),
                            Address = "61�63. Meaden, London",
                            AverageRating = 0,
                            BarImageURL = "https://aplo.co/admin/web/uploads/space/oriolebar-1-yes.jpg",
                            CountryId = new Guid("9b5f7777-2914-4ff3-8529-94ed62caa723"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8526),
                            IsDeleted = false,
                            Name = "Oriole",
                            Phone = "+44 (0)20 7314 3419",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("461f4818-eb22-45f9-a073-ef7ca8f68807"),
                            Address = "2727 Indian Creek Dr. Miami Beach",
                            AverageRating = 0,
                            BarImageURL = "https://media.cntraveler.com/photos/5a70f846e2c45625a77b0834/master/w_767,c_limit/Broken-Shaker__2018FreehandLA_BrokenShaker4_WonhoFrankLee.jpg",
                            CountryId = new Guid("fdc3a4ea-d518-4919-8402-22186a774220"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8567),
                            IsDeleted = false,
                            Name = "Broken Shaker",
                            Phone = "305-531-2727",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("5103799c-597c-4a3f-a98c-5e7e64c5aa36"),
                            Address = "52 Rue de Saintonge Paris",
                            AverageRating = 0,
                            BarImageURL = "https://wordpress.zarkov.de/wp-content/uploads/2019/09/20190908_03-Candelaria-11-Backboard-Ecke-1038x576.jpg",
                            CountryId = new Guid("9f374d4f-8bc5-4c86-b84c-1cd8dd4d350b"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8619),
                            IsDeleted = false,
                            Name = "Candelaria",
                            Phone = "+34 910 00 61",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("21a90954-3f53-4f7a-98cc-dc230b0ff341"),
                            Address = "Storgata 27 Oslo",
                            AverageRating = 0,
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http:/www.thespiritsbusiness.com/media/2015/11/Top-six-Europe-bars-to-visit-in-2016.jpg",
                            CountryId = new Guid("240dbb71-be9a-4776-a058-765b10af358d"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8710),
                            IsDeleted = false,
                            Name = "Himkok",
                            Phone = "+47 22 42 22 02",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("f4a937f5-ece2-4739-809b-550103292172"),
                            Address = "Point Square North Dock Dublin",
                            AverageRating = 0,
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/02/The-Gibson.jpg",
                            CountryId = new Guid("9b5f7777-2914-4ff3-8529-94ed62caa723"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8753),
                            IsDeleted = false,
                            Name = "The Gibson",
                            Phone = "+353 1 681 5000",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("70335403-a9c3-41e7-990d-8b16ac9715e4"),
                            Address = "304 BRUNSWICK ST",
                            AverageRating = 0,
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/bar_640_480_Black-Pearl_54b7d78180c89_5579556b49c71.jpg",
                            CountryId = new Guid("2ad0face-d859-49c4-9061-2d21db01994f"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8825),
                            IsDeleted = false,
                            Name = "Black Pearl",
                            Phone = "+61 2 8624 3131",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        },
                        new
                        {
                            Id = new Guid("3d7185e1-9788-4f5f-a2fb-58a981385691"),
                            Address = "7 Ann Siang Hill",
                            AverageRating = 0,
                            BarImageURL = "https://media.timeout.com/images/101805101/1024/576/image.jpg",
                            CountryId = new Guid("b3c210e8-13c1-4076-94c7-2518413e66a2"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 852, DateTimeKind.Utc).AddTicks(8866),
                            IsDeleted = false,
                            Name = "Operation Dagger",
                            Phone = "+39 06 2348 8666",
                            RatedCount = 0,
                            Rating = 0,
                            RatingSum = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BarId", "Id");

                    b.HasIndex("BarId");

                    b.ToTable("BarComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("BarId", "UserId", "Id");

                    b.HasIndex("UserId");

                    b.ToTable("BarRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0e0a249-f4c1-4e2b-8bbc-60299fc0c62f"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(6379),
                            ImageURL = "https://s3-eu-west-1.amazonaws.com/ballantines.com/prod/DrinkToMarket/1720/hero/1/hero_1988x994.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bacardi",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("a0c2e4ce-53bd-4748-80d2-af68fb1760ee"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7174),
                            ImageURL = "http://saltandwind.com/media/_versions/recipes/americano-cocktail-recipe_v_medium.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Americano",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("52bb52bc-1ae9-45df-8d9a-9c2f5595debe"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7235),
                            ImageURL = "https://unsobered.com/wp-content/uploads/2019/04/Caipiroska01-696x364.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipiroska",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("d69a3521-2f3d-4994-8383-fe7215a9cc25"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7253),
                            ImageURL = "https://files2.hungryforever.com/wp-content/uploads/2018/03/23125131/caipirinha-cocktail.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipirinha",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("6337db6b-76fd-4a93-b2ee-5b748b44f820"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7269),
                            ImageURL = "https://www.bbcgoodfood.com/sites/default/files/styles/recipe/public/recipe/recipe-image/2018/08/bramble.jpg?itok=vmHp8xTV",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bramble",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("a85e9e4b-fae6-467d-ad56-579134a4aa82"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7292),
                            ImageURL = "https://mixthatdrink.com/wp-content/uploads/2009/03/black-russian-drink-1024x1536.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Black Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e783b889-a17d-4cb5-9f91-717740866a56"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7328),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190816-white-russian-0119-landscape-pf-1568744178.jpg?crop=0.668xw:1.00xh;0.241xw,0&resize=980:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "White Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("927665f3-3df5-44a3-8fe0-c4a24183f1f8"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7387),
                            ImageURL = "https://dujour.com/wp-content/uploads/8297551ed0cc-500x600.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Barracuda",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("d2a261d6-3e3f-471d-af78-6504bf1f11b3"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7415),
                            ImageURL = "https://media02.stockfood.com/previews/NDY2OTI4NA==/00389107-Campari-Orange.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari Orange",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("add4c64a-c166-4da9-8f8b-8e80d3ba0567"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7458),
                            ImageURL = "https://makemeacocktail.com/images/cocktails/6868/400_601_margarita_2_2.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Margarita",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("d0e854a0-abcb-4790-b65a-f134aa0279e9"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7484),
                            ImageURL = "https://www.thespruceeats.com/thmb/AHWO_swapE-OzY_e3-Ufk2YAR2s=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/negroni-cocktail-recipe-759327-6-5b3f965b46e0fb00364f8d61.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Negroni",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f91d769b-9e27-417b-b319-826438819a2d"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7499),
                            ImageURL = "https://www.thespruceeats.com/thmb/SZ4ZYUfFLuTxyE7QhutTS_XWgHA=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dirty-martini-cocktail-recipe-759643-15_preview-5b02f935c064710036ff4c24.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry Martini",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("be1ef7fe-061d-4af8-8d3d-9feec983fd59"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7514),
                            ImageURL = "https://www.spendwithpennies.com/wp-content/uploads/2019/11/Bloody-Mary-SpendWithPennies-4.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bloody Marry",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("b7d922f1-8c85-4938-930c-10641e54296b"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7528),
                            ImageURL = "https://stevethebartender.com.au/wp-content/uploads/2014/06/manhattan-cocktail-recipe.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("afdaf39a-1caf-475d-9c00-bbdcee11b842"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7542),
                            ImageURL = "https://i1.wp.com/abarabove.com/wp-content/uploads/2020/02/P2-SingaporeSling.jpg?w=1080&ssl=1",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Singapore Sling",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("4143576d-7edf-42bd-ad90-d9a3c3404034"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7557),
                            ImageURL = "https://www.artofdrink.com/wp-content/uploads/2011/02/vesper-martini-750x500.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vesper",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("d3376e3b-aef7-4ba7-ad55-808df9fafed7"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7572),
                            ImageURL = "https://www.liquor.com/thmb/VMoOrrQzOV00AY3rgSK6XxOR0EE=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__09__04153106__mojito-720x720-recipe-a55b114fc99c4a64b38c9ef6d1660e20.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Mojito",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("697f5a4f-3750-4fa1-a244-b5314958e248"),
                            AlcoholPercentage = 3.8999999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7591),
                            ImageURL = "https://253qv1sx4ey389p9wtpp9sj0-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Classic_Hot_Toddy-700x461.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hot Toddy",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("4d671d7b-3bfd-4eb6-ae6d-92c5ecb6e0df"),
                            AlcoholPercentage = 4.0999999999999996,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7609),
                            ImageURL = "https://cookieandkate.com/images/2017/12/french-75-recipe-2-3-768x1151.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "French 75",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7df44e43-e34b-4586-b372-d4ee663fb932"),
                            AlcoholPercentage = 4.2000000000000002,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7624),
                            ImageURL = "https://www.thespruceeats.com/thmb/_Eo444fpQZYRfERGYBBwXZ0jqsw=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/vieux-carre-cocktail-recipe-761512-hero-6438e708bfe14454b9ff17168163b12a.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vieux Carre",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("9287d34b-5a82-4e39-9c9c-0eedf612c4c3"),
                            AlcoholPercentage = 4.5,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7638),
                            ImageURL = "https://noseychef.com/wp-content/uploads/2018/04/hemingwaydaiquiri.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hemingway Daiquiri",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("8199d20f-6471-4193-b295-22474fe7767c"),
                            AlcoholPercentage = 7.2999999999999998,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7652),
                            ImageURL = "https://www.liquor.com/thmb/OdGMZLH9XqRF1_WzYCg8V_jvX38=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__05__08113350__bourbon-old-fashioned-720x720-recipe-ade6f7780c304999be3577e565c9bcdd.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Old Fashioned",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("5a42d478-b16a-4bba-804e-9c8e7772c777"),
                            AlcoholPercentage = 7.2000000000000002,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7666),
                            ImageURL = "https://ik.imagekit.io/0tvlktvw2l3s5/wp-content/uploads/2017/02/DSC_1281-1024x1024.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cherry Sazerac",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("959b3b2a-0c4a-428c-9c93-684f62db6407"),
                            AlcoholPercentage = 7.4000000000000004,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7679),
                            ImageURL = "https://media.istockphoto.com/photos/raspberry-sangria-lemonade-or-mojito-picture-id918469144",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sangria Lemonade",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("75ce22b0-9d40-49f8-95c2-452a29c3978a"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7695),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/easter-cocktails-1583163536.jpg?crop=1.00xw:1.00xh;0,0&resize=640:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Easter Champagne",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("65c75483-40b2-4824-9146-aa77b407c23e"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7711),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/orange-raspberry-mimosa-1557496595.jpg?crop=0.668xw:1.00xh;0.189xw,0.00255xh&resize=768:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange Raspberry Mimosa",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1cffe84d-c1bf-4745-a16e-1843d8c956db"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7730),
                            ImageURL = "https://www.recipetineats.com/wp-content/uploads/2019/09/Tequila-Sunrise.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila Sunrise",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("a174e709-a551-453a-8a32-57281fa7dda9"),
                            AlcoholPercentage = 2.5,
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 849, DateTimeKind.Utc).AddTicks(7762),
                            ImageURL = "https://allfood.recipes/wp-content/uploads/2019/12/Disney-Dole-Pineapple-Whip-Margarita.jpg Dagger",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dole Whip Margarita",
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "UserId", "Id");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CocktailId", "UserId", "Id");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b5f7777-2914-4ff3-8529-94ed62caa723"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(4718),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("fdc3a4ea-d518-4919-8402-22186a774220"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5378),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Stated Of America"
                        },
                        new
                        {
                            Id = new Guid("14562ffd-94fa-4761-b76f-840f333fd7b7"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5399),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("b3c210e8-13c1-4076-94c7-2518413e66a2"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5403),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("c2842c3c-44fe-499d-b047-fe93305cf169"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5407),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("add52282-4c1a-4a6a-a36e-d2eb4414704f"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5415),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("4ea292b5-57af-436c-89e4-1677b93e45cb"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5429),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("39ad8010-bd30-465f-bf0e-b952a5faa06a"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5434),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("c5d3ceb6-1bab-4c9f-b627-c9db0630240d"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5437),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("9f374d4f-8bc5-4c86-b84c-1cd8dd4d350b"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5443),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("f4ebe7ed-56f1-4cdc-9d28-030ab34470e3"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5447),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("269c4119-bd6a-4245-a336-71e5d7e0cbd1"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5451),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("240dbb71-be9a-4776-a058-765b10af358d"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5455),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("2ad0face-d859-49c4-9061-2d21db01994f"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 850, DateTimeKind.Utc).AddTicks(5459),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("947ed9d4-664a-4d4b-a9ba-53c645ba5480"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(5590),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Daiquiri",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cfd7c20d-81b2-457c-9a24-361d43605d8c"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6288),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("bbbf1ae1-e4d3-47db-bb96-9331ed7e7b78"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6307),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vodka",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("06b2ac9b-5a9a-4c5e-b4fa-e7d239851823"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6312),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("43b52e1d-1c99-412c-b314-86f591219788"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6316),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Whiskey",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("dca49ecd-82ae-4d01-a9be-d91855ef36bc"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6325),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e64710d7-c54f-4826-bd93-72362282d36d"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6350),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Gin",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b92c4cc7-ea95-49f1-a004-3b0fe2a9af6b"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6354),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ee416424-6209-4994-89a1-7562f3f55f23"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6358),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Rum",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e5db2f44-40a1-4fce-a068-6c21a33e93b2"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6364),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sugar syrup",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3319ca71-9603-4078-8285-a2f962b6ec18"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6368),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Triple sec liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("260e28c8-54bf-44f3-9315-6c8733062045"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6371),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("21e94d82-7422-4a8a-8c31-29c88d3d4412"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6375),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sweet vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ca22d769-e539-44a1-9271-97fe3b5f16ea"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6379),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c8d34126-7813-4b80-8e53-c5be81200e24"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6387),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Club soda",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("86517447-9819-48c5-a59c-5cc39cb0bbe0"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6391),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cream",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d63e5ff7-8ce0-4aaf-a1a6-610a291570c1"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6395),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Maraschino liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5b0de642-0280-4def-a46b-e771082c2bc8"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6400),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Brut champagne",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f1670d66-aa66-4590-b45e-48b845c19f2d"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6404),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Fresh mint leaves",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("0600d70b-9c59-40c4-9857-4ed59bc78cf4"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6408),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Absinthe",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("041c1824-39bf-4abb-b10e-d4a840ed21d1"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6411),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Amaretto liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ff5c0d08-3ce1-4cdd-94bf-b2543e109ab6"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6415),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Milk",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7a8a3381-572c-48c9-96c7-55ca00f407e3"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6423),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cachaca",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5f457965-fc39-4150-b2b4-684e1d021924"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6427),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Ginger Ale",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("56a7d7c5-c3ad-447c-a4c1-f1cb1bb2fc81"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6430),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Lime",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a0de5ab7-627a-4a62-b26a-c0110da3c70d"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6434),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Blue curacao liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a04f5ebd-0b5f-4905-8300-553fd4f98a7e"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6438),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("add46ac6-fc3d-4ef1-9630-3bacc7bec24e"),
                            CreatedOn = new DateTime(2020, 6, 4, 15, 13, 44, 846, DateTimeKind.Utc).AddTicks(6441),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Grapefruit juice",
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9"),
                            ConcurrencyStamp = "547ee81c-87ce-47c3-bdd3-496539849ba1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7"),
                            ConcurrencyStamp = "0d786dea-2971-45dd-aa02-fdea7a821705",
                            Name = "Magician",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb"),
                            ConcurrencyStamp = "157b009a-6453-4192-a1c6-00756023ee0a",
                            Name = "Crawler",
                            NormalizedName = "CRAWLER"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d869a00-23e5-45ef-b250-02e224d280c0",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEHYccdndSa+mSeAGpIVLJRGXNlLyhyh9F6ZoT8vT71/lIpYCI26j6IootSUCyqIy4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15CLJEKQCTLPRXMVXXNSWXZH6R6KJRRU",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c49e44e5-8035-4897-9bb1-8f9d647222aa",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magician@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "magician@abv.bg",
                            NormalizedUserName = "MAGICIAN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDkY8FPFOC3NWaZE7T2jThDu3xjAIgmuQrk5Jt9EDxDtMmnzHp5u4rn2FkDQHHuZGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "MAGICIAN@ABV.BG"
                        },
                        new
                        {
                            Id = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c72ef7e9-ee18-4144-a254-99d97329ec6b",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "crawler@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "crawler@abv.bg",
                            NormalizedUserName = "CRAWLER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEB7n08Y71WKmsf7YBPGkpWHEZ1ObvsaHpMy97cAhKTrTpWOFvTuxrsxDX6pg5W+yZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "CRAWLER@ABV.BG"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            RoleId = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9")
                        },
                        new
                        {
                            UserId = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            RoleId = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7")
                        },
                        new
                        {
                            UserId = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            RoleId = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Country", "Country")
                        .WithMany("Bars")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Bars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Bars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Comments")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarRating")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Comments")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
