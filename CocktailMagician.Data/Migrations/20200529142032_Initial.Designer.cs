// <auto-generated />
using System;
using CocktailMagician.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200529142032_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c16870ca-f72f-4b42-ad5c-8a0abdb67464"),
                            Address = "The Savoy Strand London WC2R 0EZ",
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-large",
                            CountryId = new Guid("e7558d0f-9bc2-48cb-8c13-a7433741b924"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 845, DateTimeKind.Utc).AddTicks(9197),
                            IsDeleted = false,
                            Name = "American Bar",
                            Phone = "+ 44 (0)20 7836 4343",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("225f0468-42c4-4612-9dba-2ccd1b7bc83f"),
                            Address = "1170 BROADWAY & 28TH STREET NEW YORK",
                            BarImageURL = "https://www.theworlds50best.com/discovery/filestore/jpg/NoMadBar-NewYork-USA-03.jpg",
                            CountryId = new Guid("3a12cf75-ed3d-4c9b-8d97-950f599d448e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1032),
                            IsDeleted = false,
                            Name = "The NoMad",
                            Phone = "(347) 472-5660",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("abec7768-05f9-4227-b268-0a517a92aa4d"),
                            Address = "Piazza di S. Martino Ai Monti 8 00154 Roma RM",
                            BarImageURL = "https://www.puntarellarossa.it/wp/wp-content/uploads/2018/09/drink-kong-pat--850x566.jpg",
                            CountryId = new Guid("9f56e970-20fb-4284-8302-614dc81496b0"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1111),
                            IsDeleted = false,
                            Name = "Drink Kong",
                            Phone = "+39 06 2348 8666",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d0561021-c518-4c29-bd7e-52896eea7bcf"),
                            Address = "1 Cuscaden Road 249715",
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-xlarge",
                            CountryId = new Guid("85482ea4-271e-4bd9-8d7a-ddc5003806fc"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1157),
                            IsDeleted = false,
                            Name = "Manhattan",
                            Phone = "+65 6725 3377",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("88d460df-756e-42ed-930c-5ae7fab8d721"),
                            Address = "The Connaught Carlos Place Mayfair London",
                            BarImageURL = "https://iwillmakeualist.files.wordpress.com/2017/07/img_6198.jpg",
                            CountryId = new Guid("e7558d0f-9bc2-48cb-8c13-a7433741b924"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1194),
                            IsDeleted = false,
                            Name = "Connaught Bar",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5fd19100-8d44-4167-8ed0-c029adc4883c"),
                            Address = "37 Aberdeen Street Central",
                            BarImageURL = "https://www.worlds50bestbars.com/filestore/jpg/TheOldManS-WORLD-2019-003.jpg",
                            CountryId = new Guid("4f22c01a-9d0e-40f0-b8fb-5dac3e6ca26b"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1282),
                            IsDeleted = false,
                            Name = "The Old Man",
                            Phone = "85227031899",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6b3d7f6c-0eba-4678-965c-5b2939ff7995"),
                            Address = "Calle Echegaray 21 28014 Madrid",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2017/11/European-bars.jpg",
                            CountryId = new Guid("b1968897-ac64-4010-a2e0-04897300ce9c"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1334),
                            IsDeleted = false,
                            Name = "Salmon Guru",
                            Phone = "+34 910 00 61",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("18f574da-94db-42fe-abc5-4a1bfc244270"),
                            Address = "531 Hudson St New York",
                            BarImageURL = "https://wswd-wordpress-production.s3.amazonaws.com/content/uploads/2018/08/28140308/Katana-Kitten-NYC-West-Village-bar.jpg",
                            CountryId = new Guid("3a12cf75-ed3d-4c9b-8d97-950f599d448e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1378),
                            IsDeleted = false,
                            Name = "Katana Kitten",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b1151c1b-8c95-4a83-ad89-7cc1013264d0"),
                            Address = "Paceville Main Staircase St Julian's",
                            BarImageURL = "https://media-cdn.tripadvisor.com/media/photo-s/12/a2/9f/4c/good-food-drinks-and.jpg",
                            CountryId = new Guid("e535bcdf-f4ba-4897-9677-653671253b66"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1435),
                            IsDeleted = false,
                            Name = "Native",
                            Phone = "+356 2138 0635",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4e685008-0a8b-4262-9bc7-82acc23e4a77"),
                            Address = "20 Upper Ground South Bank London SE1 9PD",
                            BarImageURL = "https://static.standard.co.uk/s3fs-public/thumbnails/image/2018/04/20/17/dandelyan-london.jpg?w968",
                            CountryId = new Guid("e7558d0f-9bc2-48cb-8c13-a7433741b924"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1476),
                            IsDeleted = false,
                            Name = "Dandelyan",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8316949c-5913-4b48-bf66-279e2b3d58c9"),
                            Address = "",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/01/Dead-Rabbit.jpg",
                            CountryId = new Guid("3a12cf75-ed3d-4c9b-8d97-950f599d448e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1515),
                            IsDeleted = false,
                            Name = "The Dead Rabbit",
                            Phone = "+ 44 (0)20 7836 4343",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("02023021-7e81-4941-a8d2-4fc33590f2c4"),
                            Address = "Praxitelous 30 Athens",
                            BarImageURL = "https://www.thegreekfoundation.com/wp-content/uploads/2015/07/3b-1000x666.jpg",
                            CountryId = new Guid("f3074417-e084-424f-8b77-ac26f7118bd2"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1566),
                            IsDeleted = false,
                            Name = "The Clumsies",
                            Phone = "+30 21 0323 2682",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4f21d388-d018-41be-9cf4-85822f148d75"),
                            Address = "134 Eldridge Street New York",
                            BarImageURL = "https://cdn.vox-cdn.com/thumbor/VJquLyS0TlbhkQfJENqnPg45tyo=/21x0:228x155/920x613/filters:focal(21x0:228x155):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/38982652/2013_3_Attaboy2.0.jpg",
                            CountryId = new Guid("3a12cf75-ed3d-4c9b-8d97-950f599d448e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1637),
                            IsDeleted = false,
                            Name = "Attaboy",
                            Phone = "+36 1 792 2222",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f25438cf-abcb-40ba-a823-ceadf095114e"),
                            Address = "Soho, London",
                            BarImageURL = "https://media.timeout.com/images/103972748/1024/576/image.jpg",
                            CountryId = new Guid("e7558d0f-9bc2-48cb-8c13-a7433741b924"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1683),
                            IsDeleted = false,
                            Name = "Bar Termini",
                            Phone = "+44 20 7622 4004",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b9988a7c-fec4-4fda-a40b-11d7f4de379e"),
                            Address = "579 Fuxing Zhong Lu",
                            BarImageURL = "http://www.smartshanghai.com/uploads/venues/thumbs/thumb_1553153257.jpg",
                            CountryId = new Guid("982172f7-0b3d-4acc-b092-385ef514ac04"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1739),
                            IsDeleted = false,
                            Name = "Speak Low",
                            Phone = "6416 0133",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3284c2da-51e5-47b8-8b6c-095b803f46d2"),
                            Address = "60 Rue Charlot Paris",
                            BarImageURL = "https://savourexperience.com/wp-content/uploads/2016/05/little-red-door-parallax-01-the-parisianist.jpg",
                            CountryId = new Guid("673a66a4-90bc-436e-8b7d-df0e0c5afde2"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1796),
                            IsDeleted = false,
                            Name = "Little Red Door",
                            Phone = "+33 1 42 71 19 32",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("996c4768-1731-4a4d-9d93-209db8764078"),
                            Address = "8-9 Hoxton Square London",
                            BarImageURL = "https://www.top50cocktailbars.com/wp-content/uploads/2019/06/HappinessForgets3.jpg",
                            CountryId = new Guid("e7558d0f-9bc2-48cb-8c13-a7433741b924"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1834),
                            IsDeleted = false,
                            Name = "Happiness Forgets",
                            Phone = "+44 (0) 20 7613 0325",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cc07de3a-850f-4da6-ba04-3a6f0ed7bb6e"),
                            Address = "500 Arguello Street Redwood City",
                            BarImageURL = "https://images.squarespace-cdn.com/content/v1/5a0bb36d6f4ca3bf77c236b1/1523588347811-6GO1NX5NIL150ZVGA1YV/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/_GU89474.jpg?format=1000w",
                            CountryId = new Guid("71777afc-e19f-482b-884f-f8beb1864d3e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1896),
                            IsDeleted = false,
                            Name = "High Five",
                            Phone = "(844) 464-4445",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9a8700da-6105-4c8e-8a3c-eebe0f64552b"),
                            Address = "Av. �lvaro Obreg�n 106 Cuauht�moc",
                            BarImageURL = "https://i.vivit-tours.com/img/other/58/food-tour-roma-norte-mexico-citys-hippest-hood.jpg",
                            CountryId = new Guid("eeef9066-4245-4f07-947b-f9fdb662f903"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(1960),
                            IsDeleted = false,
                            Name = "Licorera Limantour",
                            Phone = "01 55 5264 4122",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("11b8511f-936b-4f90-9c3d-d76f445129c5"),
                            Address = "Parkview Square",
                            BarImageURL = "https://www.traveller.com.au/content/dam/images/h/1/c/8/y/p/image.related.articleLeadwide.620x349.h1c8s1.png/1552972222305.jpg",
                            CountryId = new Guid("85482ea4-271e-4bd9-8d7a-ddc5003806fc"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2003),
                            IsDeleted = false,
                            Name = "Atlas",
                            Phone = "+65 6396 4466",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("185222b5-45f9-4777-a7bc-d71d31929b15"),
                            Address = "79-81 MacDougal St New York",
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/dante-cocktail-bar-001.jpg",
                            CountryId = new Guid("3a12cf75-ed3d-4c9b-8d97-950f599d448e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2044),
                            IsDeleted = false,
                            Name = "Dante",
                            Phone = "01 55 5264 4122",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("07869b06-b74f-4652-91a5-9d8e0eaed288"),
                            Address = "61�63. Meaden, London",
                            BarImageURL = "https://aplo.co/admin/web/uploads/space/oriolebar-1-yes.jpg",
                            CountryId = new Guid("e7558d0f-9bc2-48cb-8c13-a7433741b924"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2085),
                            IsDeleted = false,
                            Name = "Oriole",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("78191da4-2d4a-4b2d-bdc7-140d5dfa0729"),
                            Address = "2727 Indian Creek Dr. Miami Beach",
                            BarImageURL = "https://media.cntraveler.com/photos/5a70f846e2c45625a77b0834/master/w_767,c_limit/Broken-Shaker__2018FreehandLA_BrokenShaker4_WonhoFrankLee.jpg",
                            CountryId = new Guid("3a12cf75-ed3d-4c9b-8d97-950f599d448e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2125),
                            IsDeleted = false,
                            Name = "Broken Shaker",
                            Phone = "305-531-2727",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cc644dad-918f-4745-8496-26e08e571b1e"),
                            Address = "52 Rue de Saintonge Paris",
                            BarImageURL = "https://wordpress.zarkov.de/wp-content/uploads/2019/09/20190908_03-Candelaria-11-Backboard-Ecke-1038x576.jpg",
                            CountryId = new Guid("673a66a4-90bc-436e-8b7d-df0e0c5afde2"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2179),
                            IsDeleted = false,
                            Name = "Candelaria",
                            Phone = "+34 910 00 61",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("65ee9998-f59f-436d-9cd8-d82bd07fd044"),
                            Address = "Storgata 27 Oslo",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http:/www.thespiritsbusiness.com/media/2015/11/Top-six-Europe-bars-to-visit-in-2016.jpg",
                            CountryId = new Guid("6ef12378-4b01-4307-836c-cb6e6fd6e627"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2240),
                            IsDeleted = false,
                            Name = "Himkok",
                            Phone = "+47 22 42 22 02",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("68a95b21-18e2-4f27-8031-853f019a4acf"),
                            Address = "Point Square North Dock Dublin",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/02/The-Gibson.jpg",
                            CountryId = new Guid("e7558d0f-9bc2-48cb-8c13-a7433741b924"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2278),
                            IsDeleted = false,
                            Name = "The Gibson",
                            Phone = "+353 1 681 5000",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("96f9515a-3061-4259-8dc8-d701ae10458b"),
                            Address = "304 BRUNSWICK ST",
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/bar_640_480_Black-Pearl_54b7d78180c89_5579556b49c71.jpg",
                            CountryId = new Guid("ddcf1bb3-5ac1-4358-8741-be8c58be1506"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2343),
                            IsDeleted = false,
                            Name = "Black Pearl",
                            Phone = "+61 2 8624 3131",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("894c4305-519c-4471-b5e7-bc8c686abab1"),
                            Address = "7 Ann Siang Hill",
                            BarImageURL = "https://media.timeout.com/images/101805101/1024/576/image.jpg",
                            CountryId = new Guid("85482ea4-271e-4bd9-8d7a-ddc5003806fc"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 846, DateTimeKind.Utc).AddTicks(2384),
                            IsDeleted = false,
                            Name = "Operation Dagger",
                            Phone = "+39 06 2348 8666",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BarId");

                    b.HasIndex("BarId");

                    b.ToTable("BarComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("BarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0aab0a2-bc8a-4b97-9764-d75d38fa0588"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(9),
                            ImageURL = "https://s3-eu-west-1.amazonaws.com/ballantines.com/prod/DrinkToMarket/1720/hero/1/hero_1988x994.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bacardi",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e4743f82-678a-4806-bfb6-f8afba5462dc"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(1714),
                            ImageURL = "http://saltandwind.com/media/_versions/recipes/americano-cocktail-recipe_v_medium.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Americano",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e70f1f3a-aec0-433f-918b-ef482d515ffb"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(1787),
                            ImageURL = "https://unsobered.com/wp-content/uploads/2019/04/Caipiroska01-696x364.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipiroska",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("a68a838a-0b48-48c1-9d1d-3289126f2249"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(1819),
                            ImageURL = "https://files2.hungryforever.com/wp-content/uploads/2018/03/23125131/caipirinha-cocktail.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipirinha",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7696edab-a112-4ede-bd29-faece6e42c22"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(1885),
                            ImageURL = "https://www.bbcgoodfood.com/sites/default/files/styles/recipe/public/recipe/recipe-image/2018/08/bramble.jpg?itok=vmHp8xTV",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bramble",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f502b46e-a4f1-4f59-b510-89b73ab19884"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(1937),
                            ImageURL = "https://mixthatdrink.com/wp-content/uploads/2009/03/black-russian-drink-1024x1536.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Black Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("18318f04-3b02-4803-b499-86a852ee87f4"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(1969),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190816-white-russian-0119-landscape-pf-1568744178.jpg?crop=0.668xw:1.00xh;0.241xw,0&resize=980:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "White Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("196556f5-7a6d-45ca-a974-266c9e7b7535"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2047),
                            ImageURL = "https://dujour.com/wp-content/uploads/8297551ed0cc-500x600.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Barracuda",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1d068c49-f492-4177-b09a-b74eef2a9283"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2078),
                            ImageURL = "https://media02.stockfood.com/previews/NDY2OTI4NA==/00389107-Campari-Orange.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari Orange",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("a0b7d6fc-ec55-438e-baa6-28817ae10639"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2115),
                            ImageURL = "https://makemeacocktail.com/images/cocktails/6868/400_601_margarita_2_2.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Margarita",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("2114a475-366e-4d74-b1ed-413436eef019"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2144),
                            ImageURL = "https://www.thespruceeats.com/thmb/AHWO_swapE-OzY_e3-Ufk2YAR2s=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/negroni-cocktail-recipe-759327-6-5b3f965b46e0fb00364f8d61.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Negroni",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("45126164-0ee0-4803-8cf3-1f6df79d6088"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2174),
                            ImageURL = "https://www.thespruceeats.com/thmb/SZ4ZYUfFLuTxyE7QhutTS_XWgHA=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dirty-martini-cocktail-recipe-759643-15_preview-5b02f935c064710036ff4c24.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry Martini",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c8ef69ba-03d9-4aaa-abf0-05a10f62aec8"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2217),
                            ImageURL = "https://www.spendwithpennies.com/wp-content/uploads/2019/11/Bloody-Mary-SpendWithPennies-4.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bloody Marry",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("47d3cffa-1e4a-4d55-8943-ed8273a8ac15"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2250),
                            ImageURL = "https://stevethebartender.com.au/wp-content/uploads/2014/06/manhattan-cocktail-recipe.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e4665999-f9de-4548-a84a-3f7061d5e110"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2279),
                            ImageURL = "https://i1.wp.com/abarabove.com/wp-content/uploads/2020/02/P2-SingaporeSling.jpg?w=1080&ssl=1",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Singapore Sling",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c7427fb1-0615-4292-a43d-87cbd7f65b27"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2309),
                            ImageURL = "https://www.artofdrink.com/wp-content/uploads/2011/02/vesper-martini-750x500.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vesper",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("5c9f41d4-a8c5-4e75-8689-2e616bbca2e3"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2339),
                            ImageURL = "https://www.liquor.com/thmb/VMoOrrQzOV00AY3rgSK6XxOR0EE=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__09__04153106__mojito-720x720-recipe-a55b114fc99c4a64b38c9ef6d1660e20.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Mojito",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("9708ed85-0c43-43a9-b26f-61ad6839ecf7"),
                            AlcoholPercentage = 3.8999999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2374),
                            ImageURL = "https://253qv1sx4ey389p9wtpp9sj0-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Classic_Hot_Toddy-700x461.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hot Toddy",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7d96f193-7b26-4ef3-932c-dcb0c392497a"),
                            AlcoholPercentage = 4.0999999999999996,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2407),
                            ImageURL = "https://cookieandkate.com/images/2017/12/french-75-recipe-2-3-768x1151.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "French 75",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("d375c1dc-6dab-4fdc-a10f-4c258b33abf4"),
                            AlcoholPercentage = 4.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2438),
                            ImageURL = "https://www.thespruceeats.com/thmb/_Eo444fpQZYRfERGYBBwXZ0jqsw=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/vieux-carre-cocktail-recipe-761512-hero-6438e708bfe14454b9ff17168163b12a.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vieux Carre",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("5c85b6e3-b762-47d2-9685-3e681c48882d"),
                            AlcoholPercentage = 4.5,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2475),
                            ImageURL = "https://noseychef.com/wp-content/uploads/2018/04/hemingwaydaiquiri.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hemingway Daiquiri",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c33c9dcd-5667-4591-b0a6-c5a52bdf6929"),
                            AlcoholPercentage = 7.2999999999999998,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2505),
                            ImageURL = "https://www.liquor.com/thmb/OdGMZLH9XqRF1_WzYCg8V_jvX38=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__05__08113350__bourbon-old-fashioned-720x720-recipe-ade6f7780c304999be3577e565c9bcdd.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Old Fashioned",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("6979cd15-1cf7-490d-bca8-3d5eec19b190"),
                            AlcoholPercentage = 7.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2533),
                            ImageURL = "https://ik.imagekit.io/0tvlktvw2l3s5/wp-content/uploads/2017/02/DSC_1281-1024x1024.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cherry Sazerac",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f2bb4b0a-cc20-41f2-a196-8f48ebab136e"),
                            AlcoholPercentage = 7.4000000000000004,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2563),
                            ImageURL = "https://media.istockphoto.com/photos/raspberry-sangria-lemonade-or-mojito-picture-id918469144",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sangria Lemonade",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("24010530-18f4-41ee-9357-daa628b6ad2b"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2594),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/easter-cocktails-1583163536.jpg?crop=1.00xw:1.00xh;0,0&resize=640:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Easter Champagne",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("3f7554a9-9425-431f-8c41-735085ce0e1d"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2623),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/orange-raspberry-mimosa-1557496595.jpg?crop=0.668xw:1.00xh;0.189xw,0.00255xh&resize=768:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange Raspberry Mimosa",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f0262cc8-c281-4700-8df7-fa3db0246c81"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2653),
                            ImageURL = "https://www.recipetineats.com/wp-content/uploads/2019/09/Tequila-Sunrise.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila Sunrise",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c4277d5e-e403-460c-ba33-e067f2e67c25"),
                            AlcoholPercentage = 2.5,
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 841, DateTimeKind.Utc).AddTicks(2685),
                            ImageURL = "https://allfood.recipes/wp-content/uploads/2019/12/Disney-Dole-Pineapple-Whip-Margarita.jpg Dagger",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dole Whip Margarita",
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7558d0f-9bc2-48cb-8c13-a7433741b924"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(5021),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("3a12cf75-ed3d-4c9b-8d97-950f599d448e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6352),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Stated Of America"
                        },
                        new
                        {
                            Id = new Guid("9f56e970-20fb-4284-8302-614dc81496b0"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6384),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("85482ea4-271e-4bd9-8d7a-ddc5003806fc"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6427),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("4f22c01a-9d0e-40f0-b8fb-5dac3e6ca26b"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6435),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("b1968897-ac64-4010-a2e0-04897300ce9c"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6452),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("e535bcdf-f4ba-4897-9677-653671253b66"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6461),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("f3074417-e084-424f-8b77-ac26f7118bd2"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6469),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("982172f7-0b3d-4acc-b092-385ef514ac04"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6489),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("673a66a4-90bc-436e-8b7d-df0e0c5afde2"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6501),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("71777afc-e19f-482b-884f-f8beb1864d3e"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6509),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("eeef9066-4245-4f07-947b-f9fdb662f903"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6517),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("6ef12378-4b01-4307-836c-cb6e6fd6e627"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6525),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("ddcf1bb3-5ac1-4358-8741-be8c58be1506"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 842, DateTimeKind.Utc).AddTicks(6533),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b839c1dd-d8a2-4c27-bbe8-e29a61e6d132"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(3679),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Daiquiri",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7beffb57-16b9-4d4f-bcbe-aa0100a48616"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(4946),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b905b752-337c-419a-a2aa-8021b60a6656"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(4974),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vodka",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("82a85f66-2382-4e0e-9b3c-660c0cb1a598"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(4984),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("332d47d4-0fcb-4653-9347-9a833fd19c73"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(4992),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Whiskey",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e60ceafa-bfea-4bb8-9994-e8289ab067a0"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5005),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5697efa1-d42a-4841-96d7-29dbb7c4458a"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5037),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Gin",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d6f6c1e6-b17c-42db-b0ec-ed7372b24c7b"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5045),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("88b3f4be-3249-40ce-b7f7-7352a1eb20a2"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5053),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Rum",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3dcc9bec-4f9f-4585-95bd-bf81848602d5"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5064),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sugar syrup",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5d90b87f-9977-4229-b9b9-5da2b9491f00"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5071),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Triple sec liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3f148195-eb63-466e-8cd3-11b40a8bdadf"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5100),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f7c2ba57-1cea-4e1f-88c1-5b8285cf71d3"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5107),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sweet vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3e2ac263-08fe-4a21-b8f2-ee9ed94129c5"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5114),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f2f78a88-fd9c-4e46-b181-6de2c51fb304"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5127),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Club soda",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("80408ad5-b4f6-452d-8d71-145990eda1a2"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5135),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cream",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8f5287fd-16af-45d1-ad41-ced1a2bdad95"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5142),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Maraschino liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f72e80c5-fae9-4743-baaa-7d27bff7b308"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5152),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Brut champagne",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5ec83e69-78f2-49cc-a6fc-597822f5a3ba"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5159),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Fresh mint leaves",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e829051b-731c-49dc-b042-90f75727fcd8"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5165),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Absinthe",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9aa3369a-abe9-4e83-bd51-9c07ccf636d9"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5172),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Amaretto liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d83eee68-52da-48d8-a4b5-575e1fbc8269"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5179),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Milk",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d25158c1-cc2c-4003-a662-f83d1b54d3de"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5194),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cachaca",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("bf1ae328-be44-4505-b39d-5648cc2b4ace"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5201),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Ginger Ale",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2eac126e-5856-4593-8a8e-d20ad1c83882"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5208),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Lime",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("23c962de-a093-4f87-b8ea-dba05e6bb46c"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5214),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Blue curacao liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1f58d88f-5d33-41a8-a959-6a3628537209"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5221),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1a441d2b-1fa8-45fb-b22e-cafc5f10d243"),
                            CreatedOn = new DateTime(2020, 5, 29, 14, 20, 30, 828, DateTimeKind.Utc).AddTicks(5228),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Grapefruit juice",
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9"),
                            ConcurrencyStamp = "31dd7f7d-5c9d-4829-9f5c-6ba93a599155",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7"),
                            ConcurrencyStamp = "385fa6ba-83db-4e3d-8b81-c31cd532f5ae",
                            Name = "Magician",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb"),
                            ConcurrencyStamp = "a4688da0-18d4-4723-adba-c76c119ea26e",
                            Name = "Crawler",
                            NormalizedName = "CRAWLER"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98348f6b-3a3d-4b41-8b5c-f83a6e7d3ff4",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEBnKv6fu6RX4c/F9QPww0K0OFHBfYBi4NfmY39LSX5bGylAPgQeMqKbD5mkHk4lw7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15CLJEKQCTLPRXMVXXNSWXZH6R6KJRRU",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea3bfcf5-51a9-4d22-8cc9-721eb91724d2",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magician@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "magician@abv.bg",
                            NormalizedUserName = "MAGICIAN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEP8hmG5MfHG/RgJva/6Gk1jjFQd55gFQuhnbVZEJ6Lx0pVQwlGxqhZsWdul67zCn8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "MAGICIAN@ABV.BG"
                        },
                        new
                        {
                            Id = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01b2188a-a2d1-4842-9653-617b76afb9c8",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "crawler@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "crawler@abv.bg",
                            NormalizedUserName = "CRAWLER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAECDDrlBPMkr379/BApNMebNp27KXR7H9W0Pxpua4u0qlOeeScWh+BRMIfRJDDA0EkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "CRAWLER@ABV.BG"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            RoleId = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9")
                        },
                        new
                        {
                            UserId = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            RoleId = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7")
                        },
                        new
                        {
                            UserId = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            RoleId = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Country", "Country")
                        .WithMany("Bars")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Bars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Bars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Comments")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarRating")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Comments")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
