// <auto-generated />
using System;
using CocktailMagician.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200526105331_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74ab1cbf-5eb3-45ed-b00b-298a1d2e927b"),
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-large",
                            CountryId = new Guid("50fcde8d-c969-4908-b2bb-0b12e246e72a"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(2194),
                            IsDeleted = false,
                            Name = "American Bar",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a0a9d18c-aa15-417f-87f7-ac15da6a36d2"),
                            BarImageURL = "https://www.theworlds50best.com/discovery/filestore/jpg/NoMadBar-NewYork-USA-03.jpg",
                            CountryId = new Guid("1960b9a5-3320-49ff-8371-cb4b88e31e88"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(5744),
                            IsDeleted = false,
                            Name = "The NoMad",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("18dc807f-4239-4358-a1b9-211157b25406"),
                            BarImageURL = "https://www.puntarellarossa.it/wp/wp-content/uploads/2018/09/drink-kong-pat--850x566.jpg",
                            CountryId = new Guid("5ed1c916-8cf5-4c06-aaf8-0412676caac7"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(5831),
                            IsDeleted = false,
                            Name = "Drink Kong",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("299921f7-cc6a-411c-a4ed-9a5516e38d3b"),
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-xlarge",
                            CountryId = new Guid("0e0753ef-d177-4766-8281-df42e66f81f7"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(5951),
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("122bc424-b7a9-429f-8e13-0c2769d86304"),
                            BarImageURL = "https://iwillmakeualist.files.wordpress.com/2017/07/img_6198.jpg",
                            CountryId = new Guid("50fcde8d-c969-4908-b2bb-0b12e246e72a"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6026),
                            IsDeleted = false,
                            Name = "Connaught Bar",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("43c96192-38c7-442c-812d-f6511455b39e"),
                            BarImageURL = "https://www.worlds50bestbars.com/filestore/jpg/TheOldManS-WORLD-2019-003.jpg",
                            CountryId = new Guid("1e62684b-1ade-4b7e-ba94-18a22586d09c"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6120),
                            IsDeleted = false,
                            Name = "The Old Man",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5e337e51-c410-4294-97ea-54debafa851a"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2017/11/European-bars.jpg",
                            CountryId = new Guid("a1a05ca6-daa5-4906-852e-a57166bf3f5d"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6176),
                            IsDeleted = false,
                            Name = "Salmon Guru",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2371b114-6b42-4da1-967a-12b8558aab27"),
                            BarImageURL = "https://wswd-wordpress-production.s3.amazonaws.com/content/uploads/2018/08/28140308/Katana-Kitten-NYC-West-Village-bar.jpg",
                            CountryId = new Guid("1960b9a5-3320-49ff-8371-cb4b88e31e88"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6218),
                            IsDeleted = false,
                            Name = "Katana Kitten",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5df10e05-39c1-4efa-8f73-ba8dc57974b2"),
                            BarImageURL = "https://media-cdn.tripadvisor.com/media/photo-s/12/a2/9f/4c/good-food-drinks-and.jpg",
                            CountryId = new Guid("8133ff20-452a-4fb0-8603-68b96b854b90"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6260),
                            IsDeleted = false,
                            Name = "Native",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("05efd8c3-819b-465d-88ab-5503f60b25b0"),
                            BarImageURL = "https://www.google.com/imgres?imgurl=http%3A%2F%2Fbensheridan.tech%2Fbars%2F_images%2Fdandelyan.jpg&imgrefurl=http%3A%2F%2Fbensheridan.tech%2Fbars%2F&tbnid=YW57kwbvtlmrSM&vet=12ahUKEwjj9IaHq7rpAhXM2-AKHccTBVYQMygEegUIARDXAQ..i&docid=5sqRZTba_Je84M&w=630&h=472&q=dandelyan%20bar&ved=2ahUKEwjj9IaHq7rpAhXM2-AKHccTBVYQMygEegUIARDXAQ",
                            CountryId = new Guid("50fcde8d-c969-4908-b2bb-0b12e246e72a"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6302),
                            IsDeleted = false,
                            Name = "Dandelyan",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b603e792-19d6-480f-ae2d-3b8693f93903"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/01/Dead-Rabbit.jpg",
                            CountryId = new Guid("1960b9a5-3320-49ff-8371-cb4b88e31e88"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6340),
                            IsDeleted = false,
                            Name = "The Dead Rabbit",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9555fed9-a250-4884-acdc-d17f75f0b371"),
                            BarImageURL = "https://www.thegreekfoundation.com/wp-content/uploads/2015/07/3b-1000x666.jpg",
                            CountryId = new Guid("4c832b8a-ead2-40a2-bf57-3ad9184aadf6"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6412),
                            IsDeleted = false,
                            Name = "The Clumsies",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6d239bd7-f220-4337-ae81-bc527c078f56"),
                            BarImageURL = "https://cdn.vox-cdn.com/thumbor/VJquLyS0TlbhkQfJENqnPg45tyo=/21x0:228x155/920x613/filters:focal(21x0:228x155):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/38982652/2013_3_Attaboy2.0.jpg",
                            CountryId = new Guid("1960b9a5-3320-49ff-8371-cb4b88e31e88"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6483),
                            IsDeleted = false,
                            Name = "Attaboy",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2533a08c-e73a-4813-b12f-17a54e444f0d"),
                            BarImageURL = "https://media.timeout.com/images/103972748/1024/576/image.jpg",
                            CountryId = new Guid("50fcde8d-c969-4908-b2bb-0b12e246e72a"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6511),
                            IsDeleted = false,
                            Name = "Bar Termini",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b71af66c-aba8-46c1-b993-0425669e2954"),
                            BarImageURL = "http://www.smartshanghai.com/uploads/venues/thumbs/thumb_1553153257.jpg",
                            CountryId = new Guid("06d229aa-d5df-43c2-a0c1-c17e334c80d9"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6537),
                            IsDeleted = false,
                            Name = "Speak Low",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("22f8e83b-3099-4119-8598-a47363f3bd82"),
                            BarImageURL = "https://savourexperience.com/wp-content/uploads/2016/05/little-red-door-parallax-01-the-parisianist.jpg",
                            CountryId = new Guid("1040999f-daf8-4fd8-947a-5f2719e768b3"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6584),
                            IsDeleted = false,
                            Name = "Little Red Door",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("93d982d1-f596-4362-b6d1-0475536c966c"),
                            BarImageURL = "https://www.top50cocktailbars.com/wp-content/uploads/2019/06/HappinessForgets3.jpg",
                            CountryId = new Guid("50fcde8d-c969-4908-b2bb-0b12e246e72a"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6623),
                            IsDeleted = false,
                            Name = "Happiness Forgets",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f1861fa2-3507-4297-951b-c415c07c3685"),
                            BarImageURL = "https://images.squarespace-cdn.com/content/v1/5a0bb36d6f4ca3bf77c236b1/1523588347811-6GO1NX5NIL150ZVGA1YV/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/_GU89474.jpg?format=1000w",
                            CountryId = new Guid("272b0083-d33b-4073-93eb-291a844daddb"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6687),
                            IsDeleted = false,
                            Name = "High Five",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("520e8dee-ecc8-4e34-a277-92149813a929"),
                            BarImageURL = "https://www.perdiem.world/wp-content/uploads/2017/07/20140120_EA_09_0086.jpg",
                            CountryId = new Guid("dff29a38-9048-43c1-af78-b60ac262cb0c"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6740),
                            IsDeleted = false,
                            Name = "Licorer�a Limantour",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7e99d79f-9178-454c-8cf2-4f1e5137c101"),
                            BarImageURL = "https://www.traveller.com.au/content/dam/images/h/1/c/8/y/p/image.related.articleLeadwide.620x349.h1c8s1.png/1552972222305.jpg",
                            CountryId = new Guid("0e0753ef-d177-4766-8281-df42e66f81f7"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6783),
                            IsDeleted = false,
                            Name = "Atlas",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f97b4bcd-e3b9-4be9-9d7e-ef3cc55f2f38"),
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/dante-cocktail-bar-001.jpg",
                            CountryId = new Guid("1960b9a5-3320-49ff-8371-cb4b88e31e88"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6833),
                            IsDeleted = false,
                            Name = "Dante",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1f3efc5c-b049-48e9-b91d-5576caa4c338"),
                            BarImageURL = "https://aplo.co/admin/web/uploads/space/oriolebar-1-yes.jpg",
                            CountryId = new Guid("50fcde8d-c969-4908-b2bb-0b12e246e72a"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6894),
                            IsDeleted = false,
                            Name = "Oriole",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b16e27fa-7f44-4711-83f4-d1e951e7738d"),
                            BarImageURL = "https://media.cntraveler.com/photos/5a70f846e2c45625a77b0834/master/w_767,c_limit/Broken-Shaker__2018FreehandLA_BrokenShaker4_WonhoFrankLee.jpg",
                            CountryId = new Guid("1960b9a5-3320-49ff-8371-cb4b88e31e88"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6935),
                            IsDeleted = false,
                            Name = "Broken Shaker",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a26819ea-08b0-49cf-b251-3e3092be62a8"),
                            BarImageURL = "https://wordpress.zarkov.de/wp-content/uploads/2019/09/20190908_03-Candelaria-11-Backboard-Ecke-1038x576.jpg",
                            CountryId = new Guid("1040999f-daf8-4fd8-947a-5f2719e768b3"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(6988),
                            IsDeleted = false,
                            Name = "Candelaria",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("082c6b26-66d9-442c-a842-60ea73a670b5"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http:/www.thespiritsbusiness.com/media/2015/11/Top-six-Europe-bars-to-visit-in-2016.jpg",
                            CountryId = new Guid("d64ec405-d2d9-4f86-8819-2bacd0b0d4fa"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(7053),
                            IsDeleted = false,
                            Name = "Himkok",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6568c9ab-d30d-4589-8af2-ce8ec3cbb354"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/02/The-Gibson.jpg",
                            CountryId = new Guid("50fcde8d-c969-4908-b2bb-0b12e246e72a"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(7094),
                            IsDeleted = false,
                            Name = "The Gibson",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9d37ac8b-9942-470b-9c60-b20fbd89b184"),
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/bar_640_480_Black-Pearl_54b7d78180c89_5579556b49c71.jpg",
                            CountryId = new Guid("646e585c-9bc1-4952-b7b8-ba977dfdf878"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(7157),
                            IsDeleted = false,
                            Name = "Black Pearl",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("52a8e9a0-4fb0-4136-8814-afdfd2fb53e3"),
                            BarImageURL = "https://thevanderlust.com/img/op/er/operation_dagger_3_jpg_1508193462.jpg$i$min$822$530$cc$$.jpeg",
                            CountryId = new Guid("0e0753ef-d177-4766-8281-df42e66f81f7"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 957, DateTimeKind.Utc).AddTicks(7204),
                            IsDeleted = false,
                            Name = "Operation Dagger",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BarId");

                    b.HasIndex("BarId");

                    b.ToTable("BarComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("BarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarStars");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abd3d6ac-1908-4ae5-bdf9-9548363fb5a0"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(1862),
                            ImageURL = "https://s3-eu-west-1.amazonaws.com/ballantines.com/prod/DrinkToMarket/1720/hero/1/hero_1988x994.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bacardi",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ada6f5e5-dccd-4427-8b31-2eebe289874b"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4435),
                            ImageURL = "http://saltandwind.com/media/_versions/recipes/americano-cocktail-recipe_v_medium.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Americano",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("3d730671-abb1-4b7b-aae3-61819cebf37f"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4505),
                            ImageURL = "https://unsobered.com/wp-content/uploads/2019/04/Caipiroska01-696x364.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipiroska",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("0264be30-1412-40fe-a424-9aef71c29dd2"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4532),
                            ImageURL = "https://files2.hungryforever.com/wp-content/uploads/2018/03/23125131/caipirinha-cocktail.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipirinha",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e871a72e-5840-4e54-ab10-ef00b7ccabaa"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4585),
                            ImageURL = "https://www.bbcgoodfood.com/sites/default/files/styles/recipe/public/recipe/recipe-image/2018/08/bramble.jpg?itok=vmHp8xTV",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bramble",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("48753084-96cd-4b87-a5a0-afa79442a40f"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4632),
                            ImageURL = "https://mixthatdrink.com/wp-content/uploads/2009/03/black-russian-drink-1024x1536.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Black Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1f7ec3ee-178d-4ab2-9952-575e33d0d5f1"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4664),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190816-white-russian-0119-landscape-pf-1568744178.jpg?crop=0.668xw:1.00xh;0.241xw,0&resize=980:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "White Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("91d56ed7-e50f-4d46-967a-58c96ec18830"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4700),
                            ImageURL = "https://www.wickiwackiwoo.com/barracuda-cocktail-recipe/",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Barracuda",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f580a084-475b-4b07-acf5-3ef06f9659d3"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4727),
                            ImageURL = "https://media02.stockfood.com/previews/NDY2OTI4NA==/00389107-Campari-Orange.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari Orange",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("2a12aac8-05aa-450b-b7c4-e46e9bc902e2"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4766),
                            ImageURL = "https://makemeacocktail.com/images/cocktails/6868/400_601_margarita_2_2.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Margarita",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("05e5390d-98e8-48fe-98dc-7a11060b59df"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4800),
                            ImageURL = "https://www.thespruceeats.com/thmb/AHWO_swapE-OzY_e3-Ufk2YAR2s=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/negroni-cocktail-recipe-759327-6-5b3f965b46e0fb00364f8d61.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Negroni",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("541dccd3-5e1f-4b89-89ad-8f52a63d9c13"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4834),
                            ImageURL = "https://www.thespruceeats.com/thmb/SZ4ZYUfFLuTxyE7QhutTS_XWgHA=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dirty-martini-cocktail-recipe-759643-15_preview-5b02f935c064710036ff4c24.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry Martini",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1ae6627a-84bc-4f61-b0f3-a7e7affad49c"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4875),
                            ImageURL = "https://www.spendwithpennies.com/wp-content/uploads/2019/11/Bloody-Mary-SpendWithPennies-4.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bloody Marry",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("363c015d-070c-4b22-b120-cb047a2134fc"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4913),
                            ImageURL = "https://stevethebartender.com.au/wp-content/uploads/2014/06/manhattan-cocktail-recipe.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("99af2e15-eb8b-4e5b-a867-9e9243f5ba29"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4942),
                            ImageURL = "https://i1.wp.com/abarabove.com/wp-content/uploads/2020/02/P2-SingaporeSling.jpg?w=1080&ssl=1",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Singapore Sling",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("4c9d0bc6-e9fd-4e1c-8b60-61bb9b889af2"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(4979),
                            ImageURL = "https://www.artofdrink.com/wp-content/uploads/2011/02/vesper-martini-750x500.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vesper",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("8e3db949-c5b6-40dd-8c97-fdd7a62a13ff"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5009),
                            ImageURL = "https://www.liquor.com/thmb/VMoOrrQzOV00AY3rgSK6XxOR0EE=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__09__04153106__mojito-720x720-recipe-a55b114fc99c4a64b38c9ef6d1660e20.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Mojito",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ac7181cb-9a7c-4e81-9ba1-063e9bba3250"),
                            AlcoholPercentage = 3.8999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5050),
                            ImageURL = "https://253qv1sx4ey389p9wtpp9sj0-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Classic_Hot_Toddy-700x461.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hot Toddy",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("362799c6-d140-4d98-9f93-69e9a8071b93"),
                            AlcoholPercentage = 4.0999999999999996,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5088),
                            ImageURL = "https://cookieandkate.com/images/2017/12/french-75-recipe-2-3-768x1151.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "French 75",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("81ded135-a877-462e-8379-6b4688823e8f"),
                            AlcoholPercentage = 4.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5270),
                            ImageURL = "https://www.thespruceeats.com/thmb/_Eo444fpQZYRfERGYBBwXZ0jqsw=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/vieux-carre-cocktail-recipe-761512-hero-6438e708bfe14454b9ff17168163b12a.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vieux Carre",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("b4afee1c-c9bd-46f9-ac6b-c853375b58e9"),
                            AlcoholPercentage = 4.5,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5321),
                            ImageURL = "https://noseychef.com/wp-content/uploads/2018/04/hemingwaydaiquiri.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hemingway Daiquiri",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("cee9df49-9503-48db-8d2c-09c008dc8b68"),
                            AlcoholPercentage = 7.2999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5355),
                            ImageURL = "https://www.liquor.com/thmb/OdGMZLH9XqRF1_WzYCg8V_jvX38=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__05__08113350__bourbon-old-fashioned-720x720-recipe-ade6f7780c304999be3577e565c9bcdd.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Old Fashioned",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("b9a98b8c-e187-4194-8fd7-5885dc05912f"),
                            AlcoholPercentage = 7.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5388),
                            ImageURL = "https://ik.imagekit.io/0tvlktvw2l3s5/wp-content/uploads/2017/02/DSC_1281-1024x1024.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cherry Sazerac",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("785ec46a-03e8-4ecc-8758-5ee7ec6dc540"),
                            AlcoholPercentage = 7.4000000000000004,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5425),
                            ImageURL = "https://media.istockphoto.com/photos/raspberry-sangria-lemonade-or-mojito-picture-id918469144",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sangria Lemonade",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("df2a775e-8bbf-401b-be3d-dadc4692b23a"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5460),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/easter-cocktails-1583163536.jpg?crop=1.00xw:1.00xh;0,0&resize=640:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Easter Champagne",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("28493212-cde4-48b7-a9e0-a625a831809d"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5490),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/orange-raspberry-mimosa-1557496595.jpg?crop=0.668xw:1.00xh;0.189xw,0.00255xh&resize=768:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange Raspberry Mimosa",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("bd61de5a-075c-44dd-b894-16a2c008ea9a"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5525),
                            ImageURL = "https://www.recipetineats.com/wp-content/uploads/2019/09/Tequila-Sunrise.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila Sunrise",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("2a26b4b2-233e-4d82-9fe1-f6e535dcf3da"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 949, DateTimeKind.Utc).AddTicks(5559),
                            ImageURL = "",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dole Whip Margarita",
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailStars");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50fcde8d-c969-4908-b2bb-0b12e246e72a"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(7294),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("1960b9a5-3320-49ff-8371-cb4b88e31e88"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8835),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Stated Of America"
                        },
                        new
                        {
                            Id = new Guid("5ed1c916-8cf5-4c06-aaf8-0412676caac7"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8870),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("0e0753ef-d177-4766-8281-df42e66f81f7"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8877),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("1e62684b-1ade-4b7e-ba94-18a22586d09c"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8884),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("a1a05ca6-daa5-4906-852e-a57166bf3f5d"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8931),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("8133ff20-452a-4fb0-8603-68b96b854b90"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8941),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("4c832b8a-ead2-40a2-bf57-3ad9184aadf6"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8947),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("06d229aa-d5df-43c2-a0c1-c17e334c80d9"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8954),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("1040999f-daf8-4fd8-947a-5f2719e768b3"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8965),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("272b0083-d33b-4073-93eb-291a844daddb"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8972),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("dff29a38-9048-43c1-af78-b60ac262cb0c"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8981),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("d64ec405-d2d9-4f86-8819-2bacd0b0d4fa"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(8987),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("646e585c-9bc1-4952-b7b8-ba977dfdf878"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 952, DateTimeKind.Utc).AddTicks(9001),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd28d496-51e0-461a-a5b2-d21a7f3da023"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(1423),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Daiquiri",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("81c55e34-5a6d-4f48-b51c-fed3d9df7dfb"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2424),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("56c98171-3abb-4f9b-91f3-a1d9709336ca"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2440),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vodka",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("340524cf-5a12-4b06-a020-9a707eb6c624"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2445),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("77e6457b-70ff-4459-b629-093a955b6637"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2450),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Whiskey",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ef3e2cf3-1566-4e0d-911d-047381c12749"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2459),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9f9278fe-fa59-49c3-9e97-aab19f1eff06"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2463),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Gin",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d552ce45-0416-48ca-9b5a-ac73b65dd54d"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2468),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cfe885db-ceb6-4e3a-93c4-50e9672e7ca0"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2485),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Rum",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3327c315-ffc8-41e4-a523-9ac922d7d1d5"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2491),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sugar syrup",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("136f81a2-8130-4339-8452-a5e2c98a492f"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2496),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Triple sec liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b1e37b9e-61d5-4d51-8a68-2a05b6859a6c"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2501),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fea1f7a3-b549-4c4f-9b34-d91c3b8f32ae"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2505),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sweet vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("61d95c7c-c529-4cfd-98bf-5c6bdffebd19"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2510),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d90d406e-9b0b-42a9-9969-c731ccb35a30"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2514),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Club soda",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("73a240c3-a41d-4c67-95a6-fe0d4ef3bdaa"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2519),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cream",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d9e13fc6-65ed-4d1a-aaee-0cd8841f5a72"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2527),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Maraschino liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e1ec2ef4-0ace-497f-be1d-e2f8b2311749"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2534),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Brut champagne",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("41f526dd-83b4-453b-8945-828b83a8e2c4"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2538),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Fresh mint leaves",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("85cc372c-ddac-4a56-b158-71aa4141ecd9"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2542),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Absinthe",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2ba910a7-56c6-4b35-84e3-a218928f90b5"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2547),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Amaretto liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("67ae8896-430c-40d8-b49d-bd244aae0f52"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2551),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Milk",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("81724a47-dd4f-409b-8cff-69f490d52874"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2555),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cachaca",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("53517fc9-e29c-4a86-961b-f4b7297246ae"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2559),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Ginger Ale",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("985d4cff-a699-4881-ad91-7dc3ca738e52"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2567),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Lime",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c63c1688-807c-41d4-b1ff-acc4547317fc"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2605),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Blue curacao liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("59556c70-61f9-4ac2-96be-7bc0da1ad100"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2609),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c0d9bd73-56dd-40a3-a86b-48f9c468fbea"),
                            CreatedOn = new DateTime(2020, 5, 26, 10, 53, 28, 944, DateTimeKind.Utc).AddTicks(2613),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Grapefruit juice",
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.UserProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("UserCover")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Country", "Country")
                        .WithMany("Bars")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Bars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Bars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Comments")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Stars")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarStars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Comments")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Stars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailStars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.UserProfilePicture", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithOne("UserPhoto")
                        .HasForeignKey("CocktailMagician.Data.Entities.UserProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
