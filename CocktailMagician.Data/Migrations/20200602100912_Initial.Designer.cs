// <auto-generated />
using System;
using CocktailMagician.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200602100912_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eecd02ee-ba09-40d8-80ae-a6b248ea851a"),
                            Address = "The Savoy Strand London WC2R 0EZ",
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-large",
                            CountryId = new Guid("e1a14726-8079-45d3-91df-f74d74b187b3"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(7075),
                            IsDeleted = false,
                            Name = "American Bar",
                            Phone = "+ 44 (0)20 7836 4343",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2f56118a-2dea-4e60-ba5d-00eca10b24e2"),
                            Address = "1170 BROADWAY & 28TH STREET NEW YORK",
                            BarImageURL = "https://www.theworlds50best.com/discovery/filestore/jpg/NoMadBar-NewYork-USA-03.jpg",
                            CountryId = new Guid("3f3ef73f-bad6-4acf-a880-366b91e34ff8"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8150),
                            IsDeleted = false,
                            Name = "The NoMad",
                            Phone = "(347) 472-5660",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1fb6fe3c-4c09-45fc-ae9e-de3663ec77a8"),
                            Address = "Piazza di S. Martino Ai Monti 8 00154 Roma RM",
                            BarImageURL = "https://www.puntarellarossa.it/wp/wp-content/uploads/2018/09/drink-kong-pat--850x566.jpg",
                            CountryId = new Guid("0868b356-3bdc-4bcc-a1da-bda6fc74a642"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8195),
                            IsDeleted = false,
                            Name = "Drink Kong",
                            Phone = "+39 06 2348 8666",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("17e03795-e88c-4a59-b3f0-7f46d3e40bf4"),
                            Address = "1 Cuscaden Road 249715",
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-xlarge",
                            CountryId = new Guid("de599ce4-cccf-4cff-99ec-26ec18fe6ea0"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8215),
                            IsDeleted = false,
                            Name = "Manhattan",
                            Phone = "+65 6725 3377",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("afc6d89b-e32e-4886-b435-028356563d05"),
                            Address = "The Connaught Carlos Place Mayfair London",
                            BarImageURL = "https://iwillmakeualist.files.wordpress.com/2017/07/img_6198.jpg",
                            CountryId = new Guid("e1a14726-8079-45d3-91df-f74d74b187b3"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8232),
                            IsDeleted = false,
                            Name = "Connaught Bar",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9d4ba1a7-f746-4db1-bfce-c9d89fcfa537"),
                            Address = "37 Aberdeen Street Central",
                            BarImageURL = "https://www.worlds50bestbars.com/filestore/jpg/TheOldManS-WORLD-2019-003.jpg",
                            CountryId = new Guid("f3d5b2fa-c787-408a-9ace-f65ec7b344a5"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8259),
                            IsDeleted = false,
                            Name = "The Old Man",
                            Phone = "85227031899",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a2a42bdd-68f1-44ae-9d36-3d23cfac566e"),
                            Address = "Calle Echegaray 21 28014 Madrid",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2017/11/European-bars.jpg",
                            CountryId = new Guid("0f5c000c-803e-4574-8e2e-a90116c1fbd0"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8285),
                            IsDeleted = false,
                            Name = "Salmon Guru",
                            Phone = "+34 910 00 61",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ad4d5a27-2b76-4d55-bace-c0e1d2953ccd"),
                            Address = "531 Hudson St New York",
                            BarImageURL = "https://wswd-wordpress-production.s3.amazonaws.com/content/uploads/2018/08/28140308/Katana-Kitten-NYC-West-Village-bar.jpg",
                            CountryId = new Guid("3f3ef73f-bad6-4acf-a880-366b91e34ff8"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8303),
                            IsDeleted = false,
                            Name = "Katana Kitten",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a8f0f45f-b6e1-4974-9281-e3bd51636d92"),
                            Address = "Paceville Main Staircase St Julian's",
                            BarImageURL = "https://media-cdn.tripadvisor.com/media/photo-s/12/a2/9f/4c/good-food-drinks-and.jpg",
                            CountryId = new Guid("3629d4d1-cc0e-4f3b-b8d0-8671c1e0807b"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8337),
                            IsDeleted = false,
                            Name = "Native",
                            Phone = "+356 2138 0635",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a31cca53-c3de-433e-a3da-a793c4895e2d"),
                            Address = "20 Upper Ground South Bank London SE1 9PD",
                            BarImageURL = "https://static.standard.co.uk/s3fs-public/thumbnails/image/2018/04/20/17/dandelyan-london.jpg?w968",
                            CountryId = new Guid("e1a14726-8079-45d3-91df-f74d74b187b3"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8362),
                            IsDeleted = false,
                            Name = "Dandelyan",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c5fc684e-7f9a-4b6b-bf7a-a0e17d211e78"),
                            Address = "",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/01/Dead-Rabbit.jpg",
                            CountryId = new Guid("3f3ef73f-bad6-4acf-a880-366b91e34ff8"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8379),
                            IsDeleted = false,
                            Name = "The Dead Rabbit",
                            Phone = "+ 44 (0)20 7836 4343",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("db551b2b-5c91-477e-b53b-d19eaae2409d"),
                            Address = "Praxitelous 30 Athens",
                            BarImageURL = "https://www.thegreekfoundation.com/wp-content/uploads/2015/07/3b-1000x666.jpg",
                            CountryId = new Guid("b57c06f4-b52e-4cab-81c3-76b82863809e"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8403),
                            IsDeleted = false,
                            Name = "The Clumsies",
                            Phone = "+30 21 0323 2682",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7ee714dc-ea36-439f-a51f-0c440a512382"),
                            Address = "134 Eldridge Street New York",
                            BarImageURL = "https://cdn.vox-cdn.com/thumbor/VJquLyS0TlbhkQfJENqnPg45tyo=/21x0:228x155/920x613/filters:focal(21x0:228x155):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/38982652/2013_3_Attaboy2.0.jpg",
                            CountryId = new Guid("3f3ef73f-bad6-4acf-a880-366b91e34ff8"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8438),
                            IsDeleted = false,
                            Name = "Attaboy",
                            Phone = "+36 1 792 2222",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("899c2c70-f5d4-4b28-9c58-667a34ab8767"),
                            Address = "Soho, London",
                            BarImageURL = "https://media.timeout.com/images/103972748/1024/576/image.jpg",
                            CountryId = new Guid("e1a14726-8079-45d3-91df-f74d74b187b3"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8454),
                            IsDeleted = false,
                            Name = "Bar Termini",
                            Phone = "+44 20 7622 4004",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("99529729-dfe6-42c7-bc14-55821fb839e5"),
                            Address = "579 Fuxing Zhong Lu",
                            BarImageURL = "http://www.smartshanghai.com/uploads/venues/thumbs/thumb_1553153257.jpg",
                            CountryId = new Guid("319027e9-f9c8-4b72-8045-9a1747e6d322"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8478),
                            IsDeleted = false,
                            Name = "Speak Low",
                            Phone = "6416 0133",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("12852b95-4684-4c6a-b98f-1d592bcad779"),
                            Address = "60 Rue Charlot Paris",
                            BarImageURL = "https://savourexperience.com/wp-content/uploads/2016/05/little-red-door-parallax-01-the-parisianist.jpg",
                            CountryId = new Guid("82113657-35b2-4cea-bc1e-8d1c6dfb46a2"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8501),
                            IsDeleted = false,
                            Name = "Little Red Door",
                            Phone = "+33 1 42 71 19 32",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b69474be-9179-47cc-b480-3d75667eda02"),
                            Address = "8-9 Hoxton Square London",
                            BarImageURL = "https://www.top50cocktailbars.com/wp-content/uploads/2019/06/HappinessForgets3.jpg",
                            CountryId = new Guid("e1a14726-8079-45d3-91df-f74d74b187b3"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8525),
                            IsDeleted = false,
                            Name = "Happiness Forgets",
                            Phone = "+44 (0) 20 7613 0325",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c6bf9f49-d000-4ccd-9cd4-e2b94121c7d8"),
                            Address = "500 Arguello Street Redwood City",
                            BarImageURL = "https://images.squarespace-cdn.com/content/v1/5a0bb36d6f4ca3bf77c236b1/1523588347811-6GO1NX5NIL150ZVGA1YV/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/_GU89474.jpg?format=1000w",
                            CountryId = new Guid("767e624a-39bb-41a0-b8b1-073b84b3898c"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8554),
                            IsDeleted = false,
                            Name = "High Five",
                            Phone = "(844) 464-4445",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e065caa9-1f26-4e23-b473-7e13ece79584"),
                            Address = "Av. �lvaro Obreg�n 106 Cuauht�moc",
                            BarImageURL = "https://i.vivit-tours.com/img/other/58/food-tour-roma-norte-mexico-citys-hippest-hood.jpg",
                            CountryId = new Guid("d863d2c7-6e7b-42e1-ac9b-b0608df4dd17"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8581),
                            IsDeleted = false,
                            Name = "Licorera Limantour",
                            Phone = "01 55 5264 4122",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ba23039b-8b9a-4110-8a5e-5de116fe5e25"),
                            Address = "Parkview Square",
                            BarImageURL = "https://www.traveller.com.au/content/dam/images/h/1/c/8/y/p/image.related.articleLeadwide.620x349.h1c8s1.png/1552972222305.jpg",
                            CountryId = new Guid("de599ce4-cccf-4cff-99ec-26ec18fe6ea0"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8601),
                            IsDeleted = false,
                            Name = "Atlas",
                            Phone = "+65 6396 4466",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fa7f3784-9467-4d22-928e-09f0a955ec90"),
                            Address = "79-81 MacDougal St New York",
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/dante-cocktail-bar-001.jpg",
                            CountryId = new Guid("3f3ef73f-bad6-4acf-a880-366b91e34ff8"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8621),
                            IsDeleted = false,
                            Name = "Dante",
                            Phone = "01 55 5264 4122",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("090417db-c8f0-4801-9638-d7b471ad1c92"),
                            Address = "61�63. Meaden, London",
                            BarImageURL = "https://aplo.co/admin/web/uploads/space/oriolebar-1-yes.jpg",
                            CountryId = new Guid("e1a14726-8079-45d3-91df-f74d74b187b3"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8641),
                            IsDeleted = false,
                            Name = "Oriole",
                            Phone = "+44 (0)20 7314 3419",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("36ccc5ad-7803-467a-8852-0ff447c2ddb6"),
                            Address = "2727 Indian Creek Dr. Miami Beach",
                            BarImageURL = "https://media.cntraveler.com/photos/5a70f846e2c45625a77b0834/master/w_767,c_limit/Broken-Shaker__2018FreehandLA_BrokenShaker4_WonhoFrankLee.jpg",
                            CountryId = new Guid("3f3ef73f-bad6-4acf-a880-366b91e34ff8"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8660),
                            IsDeleted = false,
                            Name = "Broken Shaker",
                            Phone = "305-531-2727",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("af05b3be-64cd-4ecb-bb9e-c7a4880037fa"),
                            Address = "52 Rue de Saintonge Paris",
                            BarImageURL = "https://wordpress.zarkov.de/wp-content/uploads/2019/09/20190908_03-Candelaria-11-Backboard-Ecke-1038x576.jpg",
                            CountryId = new Guid("82113657-35b2-4cea-bc1e-8d1c6dfb46a2"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8684),
                            IsDeleted = false,
                            Name = "Candelaria",
                            Phone = "+34 910 00 61",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ed39d39b-c9fb-4551-8518-d8bc33640989"),
                            Address = "Storgata 27 Oslo",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http:/www.thespiritsbusiness.com/media/2015/11/Top-six-Europe-bars-to-visit-in-2016.jpg",
                            CountryId = new Guid("6e7f715e-b125-43c1-9bc8-0cd12133b939"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8717),
                            IsDeleted = false,
                            Name = "Himkok",
                            Phone = "+47 22 42 22 02",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("055ff528-0491-4bb7-a452-714f4fc01cf3"),
                            Address = "Point Square North Dock Dublin",
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/02/The-Gibson.jpg",
                            CountryId = new Guid("e1a14726-8079-45d3-91df-f74d74b187b3"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8734),
                            IsDeleted = false,
                            Name = "The Gibson",
                            Phone = "+353 1 681 5000",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9134fe5f-99a3-429c-bf92-af57051bdfc2"),
                            Address = "304 BRUNSWICK ST",
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/bar_640_480_Black-Pearl_54b7d78180c89_5579556b49c71.jpg",
                            CountryId = new Guid("4b706943-1990-4a65-84c8-4e0aa5e98159"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8765),
                            IsDeleted = false,
                            Name = "Black Pearl",
                            Phone = "+61 2 8624 3131",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("0d08ea5b-8a75-4218-93db-0c19e1450868"),
                            Address = "7 Ann Siang Hill",
                            BarImageURL = "https://media.timeout.com/images/101805101/1024/576/image.jpg",
                            CountryId = new Guid("de599ce4-cccf-4cff-99ec-26ec18fe6ea0"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 931, DateTimeKind.Utc).AddTicks(8787),
                            IsDeleted = false,
                            Name = "Operation Dagger",
                            Phone = "+39 06 2348 8666",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BarId", "Id");

                    b.HasIndex("BarId");

                    b.ToTable("BarComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("BarId", "UserId", "Id");

                    b.HasIndex("UserId");

                    b.ToTable("BarRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13a4106f-4b81-4b20-b6df-2db6ccdc42b2"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(4447),
                            ImageURL = "https://s3-eu-west-1.amazonaws.com/ballantines.com/prod/DrinkToMarket/1720/hero/1/hero_1988x994.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bacardi",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c9930d1a-4fc5-44ad-bf5e-9ae0288907ad"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(5877),
                            ImageURL = "http://saltandwind.com/media/_versions/recipes/americano-cocktail-recipe_v_medium.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Americano",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ab1c510d-201a-4aef-b72b-f62dd2c85541"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(5966),
                            ImageURL = "https://unsobered.com/wp-content/uploads/2019/04/Caipiroska01-696x364.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipiroska",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ae7683a5-5156-4629-9db1-2306c732b6ae"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(5994),
                            ImageURL = "https://files2.hungryforever.com/wp-content/uploads/2018/03/23125131/caipirinha-cocktail.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipirinha",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1aee6437-07ce-426b-a7ec-35064a3de9c0"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6019),
                            ImageURL = "https://www.bbcgoodfood.com/sites/default/files/styles/recipe/public/recipe/recipe-image/2018/08/bramble.jpg?itok=vmHp8xTV",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bramble",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("071200ec-248f-4b84-a7d8-46705357095b"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6056),
                            ImageURL = "https://mixthatdrink.com/wp-content/uploads/2009/03/black-russian-drink-1024x1536.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Black Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("68b7f54f-80db-4971-b3ad-55ad1f8131c5"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6084),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190816-white-russian-0119-landscape-pf-1568744178.jpg?crop=0.668xw:1.00xh;0.241xw,0&resize=980:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "White Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("bc0ae567-d03f-4dab-879d-c1da00b98749"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6109),
                            ImageURL = "https://dujour.com/wp-content/uploads/8297551ed0cc-500x600.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Barracuda",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("5b3ad3ca-fb71-46d9-b2b8-f9cc03fd9db4"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6173),
                            ImageURL = "https://media02.stockfood.com/previews/NDY2OTI4NA==/00389107-Campari-Orange.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari Orange",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f9b5b0c9-085c-4cad-975c-8b067234f9ce"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6217),
                            ImageURL = "https://makemeacocktail.com/images/cocktails/6868/400_601_margarita_2_2.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Margarita",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("2ca1e393-2991-48e2-9651-f40445fbeb6c"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6286),
                            ImageURL = "https://www.thespruceeats.com/thmb/AHWO_swapE-OzY_e3-Ufk2YAR2s=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/negroni-cocktail-recipe-759327-6-5b3f965b46e0fb00364f8d61.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Negroni",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("65b7641b-58a7-4936-a884-b322b9ea15b9"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6336),
                            ImageURL = "https://www.thespruceeats.com/thmb/SZ4ZYUfFLuTxyE7QhutTS_XWgHA=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dirty-martini-cocktail-recipe-759643-15_preview-5b02f935c064710036ff4c24.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry Martini",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("26e12457-7e0f-41f2-aa4c-99fb9ed71698"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6364),
                            ImageURL = "https://www.spendwithpennies.com/wp-content/uploads/2019/11/Bloody-Mary-SpendWithPennies-4.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bloody Marry",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("db8d68e1-ab43-404c-8f73-2ceb53885cd0"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6389),
                            ImageURL = "https://stevethebartender.com.au/wp-content/uploads/2014/06/manhattan-cocktail-recipe.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("61f4ed22-aa70-46fc-affb-d30b127bc1b1"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6415),
                            ImageURL = "https://i1.wp.com/abarabove.com/wp-content/uploads/2020/02/P2-SingaporeSling.jpg?w=1080&ssl=1",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Singapore Sling",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("2aeebac1-10cd-4d74-8750-a55d4bb4199c"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6447),
                            ImageURL = "https://www.artofdrink.com/wp-content/uploads/2011/02/vesper-martini-750x500.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vesper",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e889e7a4-81df-4672-85d8-21d9f954402b"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6471),
                            ImageURL = "https://www.liquor.com/thmb/VMoOrrQzOV00AY3rgSK6XxOR0EE=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__09__04153106__mojito-720x720-recipe-a55b114fc99c4a64b38c9ef6d1660e20.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Mojito",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ab15cc3a-922b-44ef-b186-dc3151f0b66d"),
                            AlcoholPercentage = 3.8999999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6505),
                            ImageURL = "https://253qv1sx4ey389p9wtpp9sj0-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Classic_Hot_Toddy-700x461.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hot Toddy",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("cebb5a44-845f-4de4-be03-9ae46efa6f3a"),
                            AlcoholPercentage = 4.0999999999999996,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6579),
                            ImageURL = "https://cookieandkate.com/images/2017/12/french-75-recipe-2-3-768x1151.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "French 75",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("92a4c3c7-c499-43c2-bdec-b062b592a42b"),
                            AlcoholPercentage = 4.2000000000000002,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6636),
                            ImageURL = "https://www.thespruceeats.com/thmb/_Eo444fpQZYRfERGYBBwXZ0jqsw=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/vieux-carre-cocktail-recipe-761512-hero-6438e708bfe14454b9ff17168163b12a.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vieux Carre",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("70945f52-2334-4af5-8fec-9a88ff82bf8f"),
                            AlcoholPercentage = 4.5,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6674),
                            ImageURL = "https://noseychef.com/wp-content/uploads/2018/04/hemingwaydaiquiri.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hemingway Daiquiri",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e13ab61c-067a-466b-8948-f7f516bcccbc"),
                            AlcoholPercentage = 7.2999999999999998,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6702),
                            ImageURL = "https://www.liquor.com/thmb/OdGMZLH9XqRF1_WzYCg8V_jvX38=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__05__08113350__bourbon-old-fashioned-720x720-recipe-ade6f7780c304999be3577e565c9bcdd.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Old Fashioned",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("de278d80-1a4e-473f-a2f9-1a989f28ece8"),
                            AlcoholPercentage = 7.2000000000000002,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6729),
                            ImageURL = "https://ik.imagekit.io/0tvlktvw2l3s5/wp-content/uploads/2017/02/DSC_1281-1024x1024.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cherry Sazerac",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7bf8e482-2391-4788-bf3c-9bc1229a4579"),
                            AlcoholPercentage = 7.4000000000000004,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6757),
                            ImageURL = "https://media.istockphoto.com/photos/raspberry-sangria-lemonade-or-mojito-picture-id918469144",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sangria Lemonade",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("4263a662-43a7-40e2-af53-c8c2c4140f96"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6782),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/easter-cocktails-1583163536.jpg?crop=1.00xw:1.00xh;0,0&resize=640:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Easter Champagne",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("25828379-2861-4390-b9d2-817de8802264"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6808),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/orange-raspberry-mimosa-1557496595.jpg?crop=0.668xw:1.00xh;0.189xw,0.00255xh&resize=768:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange Raspberry Mimosa",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ba4430c5-fcff-4a35-b6ae-e28f0573939f"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6851),
                            ImageURL = "https://www.recipetineats.com/wp-content/uploads/2019/09/Tequila-Sunrise.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila Sunrise",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("669f27a6-fbc9-4ce6-9754-a4a486a0af69"),
                            AlcoholPercentage = 2.5,
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 928, DateTimeKind.Utc).AddTicks(6900),
                            ImageURL = "https://allfood.recipes/wp-content/uploads/2019/12/Disney-Dole-Pineapple-Whip-Margarita.jpg Dagger",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dole Whip Margarita",
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "UserId", "Id");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CocktailId", "UserId", "Id");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailRatings");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1a14726-8079-45d3-91df-f74d74b187b3"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(5874),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("3f3ef73f-bad6-4acf-a880-366b91e34ff8"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6854),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Stated Of America"
                        },
                        new
                        {
                            Id = new Guid("0868b356-3bdc-4bcc-a1da-bda6fc74a642"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6871),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("de599ce4-cccf-4cff-99ec-26ec18fe6ea0"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6875),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("f3d5b2fa-c787-408a-9ace-f65ec7b344a5"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6879),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("0f5c000c-803e-4574-8e2e-a90116c1fbd0"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6913),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("3629d4d1-cc0e-4f3b-b8d0-8671c1e0807b"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6931),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("b57c06f4-b52e-4cab-81c3-76b82863809e"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6936),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("319027e9-f9c8-4b72-8045-9a1747e6d322"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6940),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("82113657-35b2-4cea-bc1e-8d1c6dfb46a2"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6947),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("767e624a-39bb-41a0-b8b1-073b84b3898c"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6950),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("d863d2c7-6e7b-42e1-ac9b-b0608df4dd17"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6954),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("6e7f715e-b125-43c1-9bc8-0cd12133b939"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6958),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("4b706943-1990-4a65-84c8-4e0aa5e98159"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 929, DateTimeKind.Utc).AddTicks(6962),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a41700c9-754a-48d7-8626-5a987626a10a"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(2341),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Daiquiri",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1ed82320-6b6e-44ad-b40a-8fa5ecbda7d1"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3257),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2f1e7bc6-3d27-4e8a-bbb7-aa1fed512ebe"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3272),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vodka",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7fc6f3ae-5f7e-4d23-b643-199f6a9d1859"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3276),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("bd42e801-6222-4680-95af-38b147b69842"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3280),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Whiskey",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8d1d74c6-0a23-4879-a6ec-07eccc25020f"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3288),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f1c1a2b9-9e99-417e-92e1-c4b20000e463"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3312),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Gin",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("65d9ac96-bd64-45ad-989d-9ab8e3823712"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3316),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("387e75ff-41b3-481a-92f7-bfae8e16be06"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3320),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Rum",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f7192fb9-f75c-4550-a7d9-cc56debd8de2"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3326),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sugar syrup",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c73f1c6e-28a1-4693-8d77-b421cc765865"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3330),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Triple sec liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f03cbe09-9ef9-4bf3-a21b-fa4330b35598"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3334),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("080be858-f3cd-46a1-880e-90e8eb842f96"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3337),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sweet vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4015d42c-e59e-4369-94a3-c01c97092449"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3355),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d2935f64-cd93-4aea-9fd0-8a29744e70bb"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3365),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Club soda",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f2b104eb-d5ec-486d-852f-155fc4eba40e"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3368),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cream",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("27f450ac-4d37-4cbb-842f-6b20cf890165"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3372),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Maraschino liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("35015229-2349-4dfb-b632-016da76332f9"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3378),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Brut champagne",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("046de991-bc8f-4cb0-892e-592b707f196d"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3382),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Fresh mint leaves",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("eb5c4eb2-bc4a-4977-aca6-bad4fe8ac2b6"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3385),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Absinthe",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("04228896-19da-42a4-9c63-9146de20d232"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3389),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Amaretto liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("de415bf9-a173-45c9-b127-eb949d3c2fce"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3392),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Milk",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a612a417-7f18-48b4-85ed-f4b8163563f0"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3400),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cachaca",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f72aac33-44d9-417f-b3e9-669f1682ae08"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3403),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Ginger Ale",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5e3697d6-0aa3-4b6b-9128-68d3aa7224cd"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3407),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Lime",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b56f1f4c-c83e-4de8-9648-f898792a25a6"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3411),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Blue curacao liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("0029134d-b7c1-4aca-9183-13c5896ff229"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3414),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("00003a2f-9523-4fe4-9982-e21a1416af20"),
                            CreatedOn = new DateTime(2020, 6, 2, 10, 9, 10, 925, DateTimeKind.Utc).AddTicks(3417),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Grapefruit juice",
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9"),
                            ConcurrencyStamp = "43705388-9de0-48b7-a653-29070b894862",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7"),
                            ConcurrencyStamp = "1d54fd7a-607c-4f75-869b-aa166b63bf69",
                            Name = "Magician",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb"),
                            ConcurrencyStamp = "90d1283a-aaee-4bf7-b1cb-6e126906d299",
                            Name = "Crawler",
                            NormalizedName = "CRAWLER"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c07d237c-56c5-4459-bac7-73304b5afeef",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQH57bEP7lElssbzamBmymBlAJth/XZV1H/JyiGhGrElUX0U/y5BQ4mcaeMVHfVdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15CLJEKQCTLPRXMVXXNSWXZH6R6KJRRU",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95604fb3-2f7a-4910-a5fd-8bc2f78852a7",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magician@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "magician@abv.bg",
                            NormalizedUserName = "MAGICIAN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAENneszuObdah8WO7sLERUBODEjAfATdclzGIew08bzrQcXpGo8OQouvaSeaDTali6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "MAGICIAN@ABV.BG"
                        },
                        new
                        {
                            Id = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "380f9f4e-66ac-4048-8793-e2ba0e7e8c2f",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "crawler@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "crawler@abv.bg",
                            NormalizedUserName = "CRAWLER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEA3ysm2jG0lmy0F1u7AD6tpHc0IbElF8pkGYjP1zdi36rBuEXhnZ9ASz4kTkDq/wkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "CRAWLER@ABV.BG"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            RoleId = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9")
                        },
                        new
                        {
                            UserId = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            RoleId = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7")
                        },
                        new
                        {
                            UserId = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            RoleId = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Country", "Country")
                        .WithMany("Bars")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Bars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Bars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Comments")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarRating")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Comments")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
