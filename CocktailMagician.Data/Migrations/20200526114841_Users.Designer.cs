// <auto-generated />
using System;
using CocktailMagician.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200526114841_Users")]
    partial class Users
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ba9794c-69e7-4067-9e91-25de9846001f"),
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-large",
                            CountryId = new Guid("f41c1b6b-d152-4979-a11d-23e1e3d18c26"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 177, DateTimeKind.Utc).AddTicks(5809),
                            IsDeleted = false,
                            Name = "American Bar",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("beaa95a3-3d99-40c3-bfb3-abc70f82849d"),
                            BarImageURL = "https://www.theworlds50best.com/discovery/filestore/jpg/NoMadBar-NewYork-USA-03.jpg",
                            CountryId = new Guid("f07364e7-c1d2-4dd7-8d7b-ba6bb84cc292"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(688),
                            IsDeleted = false,
                            Name = "The NoMad",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7aea43e7-e5e5-4692-be4c-06f529c1410a"),
                            BarImageURL = "https://www.puntarellarossa.it/wp/wp-content/uploads/2018/09/drink-kong-pat--850x566.jpg",
                            CountryId = new Guid("e66bdb63-adee-42ef-a5d8-ea05250e8766"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(821),
                            IsDeleted = false,
                            Name = "Drink Kong",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8f9155af-943b-44e3-9764-7582bd29cbec"),
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-xlarge",
                            CountryId = new Guid("1ff13592-e864-4fc0-ae66-c3710d9bd003"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(870),
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3dfa5a1b-c2cc-4a6b-9fbb-3fb3bf515f47"),
                            BarImageURL = "https://iwillmakeualist.files.wordpress.com/2017/07/img_6198.jpg",
                            CountryId = new Guid("f41c1b6b-d152-4979-a11d-23e1e3d18c26"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(913),
                            IsDeleted = false,
                            Name = "Connaught Bar",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9af4e4a1-6e54-4541-8b59-28239107b871"),
                            BarImageURL = "https://www.worlds50bestbars.com/filestore/jpg/TheOldManS-WORLD-2019-003.jpg",
                            CountryId = new Guid("b89dc0c2-caa9-46b4-a045-924520ab865b"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(976),
                            IsDeleted = false,
                            Name = "The Old Man",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c06abb0a-d164-4cfe-b2e0-4a6bb990525c"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2017/11/European-bars.jpg",
                            CountryId = new Guid("ceb48464-7881-45af-816d-40bb9992a4eb"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1029),
                            IsDeleted = false,
                            Name = "Salmon Guru",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6ffbd26c-17a4-4ac5-acd3-2acaa90cca12"),
                            BarImageURL = "https://wswd-wordpress-production.s3.amazonaws.com/content/uploads/2018/08/28140308/Katana-Kitten-NYC-West-Village-bar.jpg",
                            CountryId = new Guid("f07364e7-c1d2-4dd7-8d7b-ba6bb84cc292"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1092),
                            IsDeleted = false,
                            Name = "Katana Kitten",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("16ba3ba6-726b-4368-a6bc-de566506a707"),
                            BarImageURL = "https://media-cdn.tripadvisor.com/media/photo-s/12/a2/9f/4c/good-food-drinks-and.jpg",
                            CountryId = new Guid("109856fe-b3dc-401f-b5fa-ef14500b7e7e"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1148),
                            IsDeleted = false,
                            Name = "Native",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("23d37f7a-541c-4ba7-99b7-9d9687182540"),
                            BarImageURL = "https://www.google.com/imgres?imgurl=http%3A%2F%2Fbensheridan.tech%2Fbars%2F_images%2Fdandelyan.jpg&imgrefurl=http%3A%2F%2Fbensheridan.tech%2Fbars%2F&tbnid=YW57kwbvtlmrSM&vet=12ahUKEwjj9IaHq7rpAhXM2-AKHccTBVYQMygEegUIARDXAQ..i&docid=5sqRZTba_Je84M&w=630&h=472&q=dandelyan%20bar&ved=2ahUKEwjj9IaHq7rpAhXM2-AKHccTBVYQMygEegUIARDXAQ",
                            CountryId = new Guid("f41c1b6b-d152-4979-a11d-23e1e3d18c26"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1193),
                            IsDeleted = false,
                            Name = "Dandelyan",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("88af944e-ff26-4bf1-a086-5c2b68f40d1a"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/01/Dead-Rabbit.jpg",
                            CountryId = new Guid("f07364e7-c1d2-4dd7-8d7b-ba6bb84cc292"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1235),
                            IsDeleted = false,
                            Name = "The Dead Rabbit",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a204faa1-8d2a-48f6-bbe1-a309b4d3cbc5"),
                            BarImageURL = "https://www.thegreekfoundation.com/wp-content/uploads/2015/07/3b-1000x666.jpg",
                            CountryId = new Guid("f954e9cb-4abf-4932-8a14-a1ebde9d7f77"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1285),
                            IsDeleted = false,
                            Name = "The Clumsies",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4510e90a-ceee-49ef-b595-a6281d438e11"),
                            BarImageURL = "https://cdn.vox-cdn.com/thumbor/VJquLyS0TlbhkQfJENqnPg45tyo=/21x0:228x155/920x613/filters:focal(21x0:228x155):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/38982652/2013_3_Attaboy2.0.jpg",
                            CountryId = new Guid("f07364e7-c1d2-4dd7-8d7b-ba6bb84cc292"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1328),
                            IsDeleted = false,
                            Name = "Attaboy",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4c0b0888-cf99-46f2-9491-026bf3c227cc"),
                            BarImageURL = "https://media.timeout.com/images/103972748/1024/576/image.jpg",
                            CountryId = new Guid("f41c1b6b-d152-4979-a11d-23e1e3d18c26"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1369),
                            IsDeleted = false,
                            Name = "Bar Termini",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("25062c89-36a1-4655-bfd9-7aa4cb0f79f1"),
                            BarImageURL = "http://www.smartshanghai.com/uploads/venues/thumbs/thumb_1553153257.jpg",
                            CountryId = new Guid("e7634a74-774f-44f2-a0c1-c9ab41f91cc4"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1460),
                            IsDeleted = false,
                            Name = "Speak Low",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e4bc8183-5c22-4701-9756-7b922f70fd40"),
                            BarImageURL = "https://savourexperience.com/wp-content/uploads/2016/05/little-red-door-parallax-01-the-parisianist.jpg",
                            CountryId = new Guid("e631b4f6-bfa5-4d96-903d-218926d3f45c"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1527),
                            IsDeleted = false,
                            Name = "Little Red Door",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2b4dac98-2d2b-486c-a0cf-e88db594f94d"),
                            BarImageURL = "https://www.top50cocktailbars.com/wp-content/uploads/2019/06/HappinessForgets3.jpg",
                            CountryId = new Guid("f41c1b6b-d152-4979-a11d-23e1e3d18c26"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1566),
                            IsDeleted = false,
                            Name = "Happiness Forgets",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ae9a6673-f58e-4548-94c9-7f2574d22df6"),
                            BarImageURL = "https://images.squarespace-cdn.com/content/v1/5a0bb36d6f4ca3bf77c236b1/1523588347811-6GO1NX5NIL150ZVGA1YV/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/_GU89474.jpg?format=1000w",
                            CountryId = new Guid("258615c5-81b1-4855-8a74-906ade842e17"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1625),
                            IsDeleted = false,
                            Name = "High Five",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fd0001e0-337f-4dd2-8c60-241020c02c41"),
                            BarImageURL = "https://www.perdiem.world/wp-content/uploads/2017/07/20140120_EA_09_0086.jpg",
                            CountryId = new Guid("1a63a9f4-fac5-4f40-9399-8aecff7b821e"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1682),
                            IsDeleted = false,
                            Name = "Licorer�a Limantour",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c94b60f4-fefe-4c86-85ef-0f60c76ca5cd"),
                            BarImageURL = "https://www.traveller.com.au/content/dam/images/h/1/c/8/y/p/image.related.articleLeadwide.620x349.h1c8s1.png/1552972222305.jpg",
                            CountryId = new Guid("1ff13592-e864-4fc0-ae66-c3710d9bd003"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1724),
                            IsDeleted = false,
                            Name = "Atlas",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("46f96807-8f15-4d44-ae68-7d0aea749fc7"),
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/dante-cocktail-bar-001.jpg",
                            CountryId = new Guid("f07364e7-c1d2-4dd7-8d7b-ba6bb84cc292"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1764),
                            IsDeleted = false,
                            Name = "Dante",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3b9a91af-ff11-41d2-810b-e6b19ef5d6b8"),
                            BarImageURL = "https://aplo.co/admin/web/uploads/space/oriolebar-1-yes.jpg",
                            CountryId = new Guid("f41c1b6b-d152-4979-a11d-23e1e3d18c26"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1801),
                            IsDeleted = false,
                            Name = "Oriole",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8254b42f-4e9f-4155-bb6e-79fa884df105"),
                            BarImageURL = "https://media.cntraveler.com/photos/5a70f846e2c45625a77b0834/master/w_767,c_limit/Broken-Shaker__2018FreehandLA_BrokenShaker4_WonhoFrankLee.jpg",
                            CountryId = new Guid("f07364e7-c1d2-4dd7-8d7b-ba6bb84cc292"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1844),
                            IsDeleted = false,
                            Name = "Broken Shaker",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("876ccba8-0ac8-45ab-8d65-20f649e9f9b8"),
                            BarImageURL = "https://wordpress.zarkov.de/wp-content/uploads/2019/09/20190908_03-Candelaria-11-Backboard-Ecke-1038x576.jpg",
                            CountryId = new Guid("e631b4f6-bfa5-4d96-903d-218926d3f45c"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1907),
                            IsDeleted = false,
                            Name = "Candelaria",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fa03c5a4-a1fd-4baf-81f3-a91dea6c73ab"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http:/www.thespiritsbusiness.com/media/2015/11/Top-six-Europe-bars-to-visit-in-2016.jpg",
                            CountryId = new Guid("7eb68588-5085-4c69-97b7-d5069bdf6933"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(1965),
                            IsDeleted = false,
                            Name = "Himkok",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("bfcc52b2-c484-47d4-ab73-cfe110d916ce"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/02/The-Gibson.jpg",
                            CountryId = new Guid("f41c1b6b-d152-4979-a11d-23e1e3d18c26"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(2007),
                            IsDeleted = false,
                            Name = "The Gibson",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("99935d8e-6a51-4865-bf5a-6faa657b628f"),
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/bar_640_480_Black-Pearl_54b7d78180c89_5579556b49c71.jpg",
                            CountryId = new Guid("f4e71836-0517-40df-a10a-44828b38a3cf"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(2071),
                            IsDeleted = false,
                            Name = "Black Pearl",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1e122e11-b909-4dd7-a9ba-7c200175c421"),
                            BarImageURL = "https://thevanderlust.com/img/op/er/operation_dagger_3_jpg_1508193462.jpg$i$min$822$530$cc$$.jpeg",
                            CountryId = new Guid("1ff13592-e864-4fc0-ae66-c3710d9bd003"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 178, DateTimeKind.Utc).AddTicks(2116),
                            IsDeleted = false,
                            Name = "Operation Dagger",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BarId");

                    b.HasIndex("BarId");

                    b.ToTable("BarComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("BarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarStars");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40c9eea1-9e8c-416b-9a3c-a5ce2f76f58e"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(5981),
                            ImageURL = "https://s3-eu-west-1.amazonaws.com/ballantines.com/prod/DrinkToMarket/1720/hero/1/hero_1988x994.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bacardi",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("593643e6-ae34-4f13-9b05-92bf4a15e94c"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(7506),
                            ImageURL = "http://saltandwind.com/media/_versions/recipes/americano-cocktail-recipe_v_medium.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Americano",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("b672d765-6118-446e-acca-8154ca3f27ce"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(7574),
                            ImageURL = "https://unsobered.com/wp-content/uploads/2019/04/Caipiroska01-696x364.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipiroska",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("84778dec-6ee9-4ae7-b4f6-cb4ade5c8166"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(7604),
                            ImageURL = "https://files2.hungryforever.com/wp-content/uploads/2018/03/23125131/caipirinha-cocktail.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipirinha",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("24f07e11-bc66-4662-82b6-3602361350a5"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(7636),
                            ImageURL = "https://www.bbcgoodfood.com/sites/default/files/styles/recipe/public/recipe/recipe-image/2018/08/bramble.jpg?itok=vmHp8xTV",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bramble",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("06d95cd0-1d6b-4547-a7c6-503bd734fb7e"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(7705),
                            ImageURL = "https://mixthatdrink.com/wp-content/uploads/2009/03/black-russian-drink-1024x1536.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Black Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("0ff46691-bfd2-49de-973e-75ffcf04da66"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(7757),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190816-white-russian-0119-landscape-pf-1568744178.jpg?crop=0.668xw:1.00xh;0.241xw,0&resize=980:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "White Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("db55f723-538d-4880-9d0c-9a0a6b6eb8d6"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8072),
                            ImageURL = "https://www.wickiwackiwoo.com/barracuda-cocktail-recipe/",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Barracuda",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1ac18b0e-a39a-4150-88fc-5e8320a94c25"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8118),
                            ImageURL = "https://media02.stockfood.com/previews/NDY2OTI4NA==/00389107-Campari-Orange.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari Orange",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("de352883-e0eb-4ba3-bdcf-16fe79f70306"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8163),
                            ImageURL = "https://makemeacocktail.com/images/cocktails/6868/400_601_margarita_2_2.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Margarita",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("94a0712e-660e-425b-9044-61f5ed9f5042"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8267),
                            ImageURL = "https://www.thespruceeats.com/thmb/AHWO_swapE-OzY_e3-Ufk2YAR2s=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/negroni-cocktail-recipe-759327-6-5b3f965b46e0fb00364f8d61.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Negroni",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("6b181746-0bbb-47c9-9bf3-83f2189434c5"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8305),
                            ImageURL = "https://www.thespruceeats.com/thmb/SZ4ZYUfFLuTxyE7QhutTS_XWgHA=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dirty-martini-cocktail-recipe-759643-15_preview-5b02f935c064710036ff4c24.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry Martini",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1a18211e-348a-4eb0-90e4-fc5238a3a5f1"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8350),
                            ImageURL = "https://www.spendwithpennies.com/wp-content/uploads/2019/11/Bloody-Mary-SpendWithPennies-4.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bloody Marry",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f4d2f123-ced7-467a-b2af-83c133b8cb76"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8382),
                            ImageURL = "https://stevethebartender.com.au/wp-content/uploads/2014/06/manhattan-cocktail-recipe.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("3586e48c-dbb6-4742-9860-41d845ece986"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8411),
                            ImageURL = "https://i1.wp.com/abarabove.com/wp-content/uploads/2020/02/P2-SingaporeSling.jpg?w=1080&ssl=1",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Singapore Sling",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("33e332b3-421f-43a5-95a5-d2403b660953"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8441),
                            ImageURL = "https://www.artofdrink.com/wp-content/uploads/2011/02/vesper-martini-750x500.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vesper",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c05e55d8-49a7-4f5b-b820-9629820b7145"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8469),
                            ImageURL = "https://www.liquor.com/thmb/VMoOrrQzOV00AY3rgSK6XxOR0EE=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__09__04153106__mojito-720x720-recipe-a55b114fc99c4a64b38c9ef6d1660e20.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Mojito",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("afee245a-b591-4f9a-9d63-1ab8b07284c1"),
                            AlcoholPercentage = 3.8999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8509),
                            ImageURL = "https://253qv1sx4ey389p9wtpp9sj0-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Classic_Hot_Toddy-700x461.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hot Toddy",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("677abfec-dff5-4048-b05e-0691a1e84ee4"),
                            AlcoholPercentage = 4.0999999999999996,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8540),
                            ImageURL = "https://cookieandkate.com/images/2017/12/french-75-recipe-2-3-768x1151.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "French 75",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("8ee8b75a-6e23-42a8-9e16-07f402f43706"),
                            AlcoholPercentage = 4.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8572),
                            ImageURL = "https://www.thespruceeats.com/thmb/_Eo444fpQZYRfERGYBBwXZ0jqsw=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/vieux-carre-cocktail-recipe-761512-hero-6438e708bfe14454b9ff17168163b12a.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vieux Carre",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("3efb29cd-d589-4186-a99c-8ddfa08f319a"),
                            AlcoholPercentage = 4.5,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8610),
                            ImageURL = "https://noseychef.com/wp-content/uploads/2018/04/hemingwaydaiquiri.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hemingway Daiquiri",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("99b5cca8-139f-48d6-bfdf-fcb651873a70"),
                            AlcoholPercentage = 7.2999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8644),
                            ImageURL = "https://www.liquor.com/thmb/OdGMZLH9XqRF1_WzYCg8V_jvX38=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__05__08113350__bourbon-old-fashioned-720x720-recipe-ade6f7780c304999be3577e565c9bcdd.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Old Fashioned",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("bb25096c-b082-4442-ba02-921b67dd937b"),
                            AlcoholPercentage = 7.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8675),
                            ImageURL = "https://ik.imagekit.io/0tvlktvw2l3s5/wp-content/uploads/2017/02/DSC_1281-1024x1024.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cherry Sazerac",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ca60881a-287e-4de7-9630-0be7d48159e4"),
                            AlcoholPercentage = 7.4000000000000004,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8705),
                            ImageURL = "https://media.istockphoto.com/photos/raspberry-sangria-lemonade-or-mojito-picture-id918469144",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sangria Lemonade",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("68ae6ddd-a028-4d77-bb44-bf41b30038ba"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8734),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/easter-cocktails-1583163536.jpg?crop=1.00xw:1.00xh;0,0&resize=640:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Easter Champagne",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("4c570394-1629-4ff2-9f6b-056a9c8e5a86"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8761),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/orange-raspberry-mimosa-1557496595.jpg?crop=0.668xw:1.00xh;0.189xw,0.00255xh&resize=768:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange Raspberry Mimosa",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f140061c-3431-4fdf-af55-f80eff98037a"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8789),
                            ImageURL = "https://www.recipetineats.com/wp-content/uploads/2019/09/Tequila-Sunrise.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila Sunrise",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7f308487-f3e7-4668-9319-53183de2f321"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 172, DateTimeKind.Utc).AddTicks(8817),
                            ImageURL = "",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dole Whip Margarita",
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailStars");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f41c1b6b-d152-4979-a11d-23e1e3d18c26"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(1781),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("f07364e7-c1d2-4dd7-8d7b-ba6bb84cc292"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3136),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Stated Of America"
                        },
                        new
                        {
                            Id = new Guid("e66bdb63-adee-42ef-a5d8-ea05250e8766"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3175),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("1ff13592-e864-4fc0-ae66-c3710d9bd003"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3184),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("b89dc0c2-caa9-46b4-a045-924520ab865b"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3193),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("ceb48464-7881-45af-816d-40bb9992a4eb"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3209),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("109856fe-b3dc-401f-b5fa-ef14500b7e7e"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3217),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("f954e9cb-4abf-4932-8a14-a1ebde9d7f77"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3225),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("e7634a74-774f-44f2-a0c1-c9ab41f91cc4"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3248),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("e631b4f6-bfa5-4d96-903d-218926d3f45c"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3293),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("258615c5-81b1-4855-8a74-906ade842e17"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3301),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("1a63a9f4-fac5-4f40-9399-8aecff7b821e"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3310),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("7eb68588-5085-4c69-97b7-d5069bdf6933"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3317),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("f4e71836-0517-40df-a10a-44828b38a3cf"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 174, DateTimeKind.Utc).AddTicks(3325),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("349d60f9-2dee-4435-87b5-9ea4a0240ce2"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(2441),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Daiquiri",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f7ed796a-a8ac-4fc9-8c4e-8fbaeb5c5d42"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3717),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("bf9c1f43-38fd-41c8-891f-e4da70c2155b"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3787),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vodka",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9e157ac8-c277-403f-b8ce-d898dbd8e6ed"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3797),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("291f93f4-9169-4931-b536-b016875e8afb"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3806),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Whiskey",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("17432597-8b3b-49f0-a466-d73226ff1b32"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3822),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fc338fb8-f6a8-401b-b480-d3d190da699b"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3829),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Gin",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5c90b2fa-9d2d-4b71-85fb-1bfb71653117"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3837),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("12b021b8-dbfa-4078-bd8f-ac078573445e"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3925),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Rum",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8f999d74-a73c-4c0f-a410-083987f9e4a1"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3937),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sugar syrup",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f1052c07-87a0-4df9-a829-3ddfa506f968"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3953),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Triple sec liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9da1c1a4-1c9b-49b0-bf81-55cc43452e6b"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3961),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("16eb7f69-7f41-4388-be36-3d4e67058b1e"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3968),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sweet vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("925f736f-1ddb-44bc-bf95-9ca420b6e101"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3976),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("be68c70b-3cdc-44f3-85c7-067e7c7fed90"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3982),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Club soda",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a32a7652-612a-4856-9792-f5e418406c4b"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3989),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cream",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("de59e8c5-b7c7-4d1c-b454-49b158faca42"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(3996),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Maraschino liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7419fef9-3be2-468a-a634-c025b777ddaa"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4006),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Brut champagne",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("30d9a938-3645-4099-8912-b0d8811d3a29"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4020),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Fresh mint leaves",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c1ce5907-a094-4c80-98e1-ded61bc1f94f"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4028),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Absinthe",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("da17f654-52de-4c44-8eb2-9cf570d6d5bb"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4036),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Amaretto liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("71c9c638-d5a2-43ca-aa8b-3ae5304f48b9"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4043),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Milk",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5a67bce0-5554-4a2b-9b1c-6eccffb39be6"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4051),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cachaca",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6d5f1b0c-e2e0-4a50-be05-a4660a1c5680"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4058),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Ginger Ale",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f8a4cc0a-d657-483f-97d4-ecb04ebee4e5"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4065),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Lime",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1d7dee10-a891-4513-b825-30eef8bc7edd"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4073),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Blue curacao liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ab9326ba-2f06-4eb2-9e3f-4556fd577db9"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4086),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("850d6d0d-cadf-491b-b85c-c7a6cbc98a1a"),
                            CreatedOn = new DateTime(2020, 5, 26, 11, 48, 37, 167, DateTimeKind.Utc).AddTicks(4094),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Grapefruit juice",
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9"),
                            ConcurrencyStamp = "0708151a-d5a2-4b3a-adfa-33f8578d0df7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7"),
                            ConcurrencyStamp = "ae7d84da-5d6a-434b-8a55-d431730fa750",
                            Name = "Magician",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb"),
                            ConcurrencyStamp = "f50d7a78-4de4-4ea5-b7fe-f892b61b1c44",
                            Name = "Crawler",
                            NormalizedName = "CRAWLER"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9573f6c4-915c-4923-af0c-e11d8b1d899b",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEKTmPdtUaW/pRu2yjaPpy5RhmqyXrNSQaPa3+aUL+ev8SnZOhwaPL/nocF+l9rIH5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15CLJEKQCTLPRXMVXXNSWXZH6R6KJRRU",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b58d7d22-2542-40e0-afd2-fa4046f2c631",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magician@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "magician@abv.bg",
                            NormalizedUserName = "MAGICIAN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEEv5t2Ix+1a4d77c9+A8Oy6lY3Gl3fM8roG5JOzx542sIDX5L6r5glijycva0aRrtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "MAGICIAN@ABV.BG"
                        },
                        new
                        {
                            Id = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab6f2e91-c1a2-49a5-afba-779b999d669b",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "crawler@abv.bg",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "crawler@abv.bg",
                            NormalizedUserName = "CRAWLER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEHzN6uaO5/6IgHLxRmcsqow2ZnBz5KsSFtLzPJWL95z2bWneKerFy0fA85hDzBDtKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "CRAWLER@ABV.BG"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.UserProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("UserCover")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5874617e-289f-4eb2-94ee-20b52faf67fa"),
                            RoleId = new Guid("c611672d-5da5-43d3-bbbf-e897e4456cb9")
                        },
                        new
                        {
                            UserId = new Guid("baf374a9-0e81-4656-b0bb-16fe10985320"),
                            RoleId = new Guid("f476e48e-0586-4f40-92b2-2279ce6f6db7")
                        },
                        new
                        {
                            UserId = new Guid("4734cf2f-fcb8-461b-88dc-06152e89bc97"),
                            RoleId = new Guid("01bc7e12-c30b-47d1-a0a0-b146bb93ccdb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Country", "Country")
                        .WithMany("Bars")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Bars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Bars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Comments")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Stars")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarStars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Comments")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Stars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailStars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.UserProfilePicture", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithOne("UserPhoto")
                        .HasForeignKey("CocktailMagician.Data.Entities.UserProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
