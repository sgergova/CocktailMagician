// <auto-generated />
using System;
using CocktailMagician.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200526054119_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a1f0f57-d1b2-4c8a-8fd2-380ebec30c2d"),
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-large",
                            CountryId = new Guid("0154eadb-9ce4-405a-aa3f-76934bc31b39"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(8489),
                            IsDeleted = false,
                            Name = "American Bar",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f26052d6-073f-40f9-a21c-819dc92bf557"),
                            BarImageURL = "https://www.theworlds50best.com/discovery/filestore/jpg/NoMadBar-NewYork-USA-03.jpg",
                            CountryId = new Guid("0a35f397-98e7-46bd-bfa9-7918a83289c7"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9114),
                            IsDeleted = false,
                            Name = "The NoMad",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e55809a4-f20e-4503-b768-90fe4acaee22"),
                            BarImageURL = "https://www.puntarellarossa.it/wp/wp-content/uploads/2018/09/drink-kong-pat--850x566.jpg",
                            CountryId = new Guid("ea45f20f-f653-4318-8f5b-0c365c47f03a"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9135),
                            IsDeleted = false,
                            Name = "Drink Kong",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2ab4449a-3732-4e92-a0fe-cafb12c4d2a0"),
                            BarImageURL = "https://im1.dineout.co.in/images/uploads/restaurant/sharpen/1/i/l/p12602-15475381735c3d8efdc738b.jpg?tr=tr:n-xlarge",
                            CountryId = new Guid("fb2e20b2-ab38-4fea-b9fb-2a1bbfd9fe61"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9147),
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("59e850e3-ff12-4318-831b-87bd1722a2f9"),
                            BarImageURL = "https://iwillmakeualist.files.wordpress.com/2017/07/img_6198.jpg",
                            CountryId = new Guid("0154eadb-9ce4-405a-aa3f-76934bc31b39"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9157),
                            IsDeleted = false,
                            Name = "Connaught Bar",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ffe90ef9-dbea-4c03-8c0c-b2a907c806f5"),
                            BarImageURL = "https://www.worlds50bestbars.com/filestore/jpg/TheOldManS-WORLD-2019-003.jpg",
                            CountryId = new Guid("f4197526-50dd-4906-8df1-6a215a79864f"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9262),
                            IsDeleted = false,
                            Name = "The Old Man",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4cf704e9-0d74-4713-86d9-d95f3337d79d"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2017/11/European-bars.jpg",
                            CountryId = new Guid("1716c96b-6635-4aa4-9d8d-3a9296f73772"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9278),
                            IsDeleted = false,
                            Name = "Salmon Guru",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("50a7d728-9f58-4dca-a2c5-95a622d9d6f3"),
                            BarImageURL = "https://wswd-wordpress-production.s3.amazonaws.com/content/uploads/2018/08/28140308/Katana-Kitten-NYC-West-Village-bar.jpg",
                            CountryId = new Guid("0a35f397-98e7-46bd-bfa9-7918a83289c7"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9289),
                            IsDeleted = false,
                            Name = "Katana Kitten",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("36026893-b691-4954-b8ce-ca0c6ee6d86c"),
                            BarImageURL = "https://media-cdn.tripadvisor.com/media/photo-s/12/a2/9f/4c/good-food-drinks-and.jpg",
                            CountryId = new Guid("5e08eb5f-b4fd-4527-b69a-a163bd95ca5d"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9307),
                            IsDeleted = false,
                            Name = "Native",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("479e795b-847c-4617-89a6-aff7484e0365"),
                            BarImageURL = "https://www.google.com/imgres?imgurl=http%3A%2F%2Fbensheridan.tech%2Fbars%2F_images%2Fdandelyan.jpg&imgrefurl=http%3A%2F%2Fbensheridan.tech%2Fbars%2F&tbnid=YW57kwbvtlmrSM&vet=12ahUKEwjj9IaHq7rpAhXM2-AKHccTBVYQMygEegUIARDXAQ..i&docid=5sqRZTba_Je84M&w=630&h=472&q=dandelyan%20bar&ved=2ahUKEwjj9IaHq7rpAhXM2-AKHccTBVYQMygEegUIARDXAQ",
                            CountryId = new Guid("0154eadb-9ce4-405a-aa3f-76934bc31b39"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9317),
                            IsDeleted = false,
                            Name = "Dandelyan",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7bd9397a-56e9-4a61-8aeb-72212eee4c5f"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/01/Dead-Rabbit.jpg",
                            CountryId = new Guid("0a35f397-98e7-46bd-bfa9-7918a83289c7"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9326),
                            IsDeleted = false,
                            Name = "The Dead Rabbit",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("906f2543-b014-40c8-aa9a-78348bc3a1db"),
                            BarImageURL = "https://www.thegreekfoundation.com/wp-content/uploads/2015/07/3b-1000x666.jpg",
                            CountryId = new Guid("6429072f-beba-4fa1-91ed-dc51cb01b4b6"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9338),
                            IsDeleted = false,
                            Name = "The Clumsies",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("692eb380-6aad-4866-8c0e-e36636e4c1c0"),
                            BarImageURL = "https://cdn.vox-cdn.com/thumbor/VJquLyS0TlbhkQfJENqnPg45tyo=/21x0:228x155/920x613/filters:focal(21x0:228x155):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/38982652/2013_3_Attaboy2.0.jpg",
                            CountryId = new Guid("0a35f397-98e7-46bd-bfa9-7918a83289c7"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9347),
                            IsDeleted = false,
                            Name = "Attaboy",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4ae94f06-7667-47a8-8425-633e515d525b"),
                            BarImageURL = "https://media.timeout.com/images/103972748/1024/576/image.jpg",
                            CountryId = new Guid("0154eadb-9ce4-405a-aa3f-76934bc31b39"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9355),
                            IsDeleted = false,
                            Name = "Bar Termini",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6777dd48-a551-44d0-845f-49a4cb723713"),
                            BarImageURL = "http://www.smartshanghai.com/uploads/venues/thumbs/thumb_1553153257.jpg",
                            CountryId = new Guid("74d6e14c-ecfe-4125-91d1-0a1ddc0c3fe9"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9368),
                            IsDeleted = false,
                            Name = "Speak Low",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e56b3e64-0cfe-4947-9af2-c9ef0c7be7df"),
                            BarImageURL = "https://savourexperience.com/wp-content/uploads/2016/05/little-red-door-parallax-01-the-parisianist.jpg",
                            CountryId = new Guid("20b4baa1-b931-4ca3-815e-2e925c254f96"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9381),
                            IsDeleted = false,
                            Name = "Little Red Door",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("adee5f8f-8788-45f4-845a-a4ff681b94f5"),
                            BarImageURL = "https://www.top50cocktailbars.com/wp-content/uploads/2019/06/HappinessForgets3.jpg",
                            CountryId = new Guid("0154eadb-9ce4-405a-aa3f-76934bc31b39"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9393),
                            IsDeleted = false,
                            Name = "Happiness Forgets",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e1ccddfc-dcde-417b-aaae-6775174d21e5"),
                            BarImageURL = "https://images.squarespace-cdn.com/content/v1/5a0bb36d6f4ca3bf77c236b1/1523588347811-6GO1NX5NIL150ZVGA1YV/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/_GU89474.jpg?format=1000w",
                            CountryId = new Guid("86f253e7-d84f-44bd-b565-cf70250d9849"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9408),
                            IsDeleted = false,
                            Name = "High Five",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("adb665bb-ccd0-40a1-99dc-fc461addadb0"),
                            BarImageURL = "https://www.perdiem.world/wp-content/uploads/2017/07/20140120_EA_09_0086.jpg",
                            CountryId = new Guid("f8d7cd87-fa11-4a63-b631-ba6e65ef20d6"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9422),
                            IsDeleted = false,
                            Name = "Licorer�a Limantour",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3894194d-96fb-4c2e-84ec-7f5b45920106"),
                            BarImageURL = "https://www.traveller.com.au/content/dam/images/h/1/c/8/y/p/image.related.articleLeadwide.620x349.h1c8s1.png/1552972222305.jpg",
                            CountryId = new Guid("fb2e20b2-ab38-4fea-b9fb-2a1bbfd9fe61"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9431),
                            IsDeleted = false,
                            Name = "Atlas",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fc5d6ff9-3d8a-4ae5-94e0-32cd6331d9df"),
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/dante-cocktail-bar-001.jpg",
                            CountryId = new Guid("0a35f397-98e7-46bd-bfa9-7918a83289c7"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9442),
                            IsDeleted = false,
                            Name = "Dante",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e764b5c2-dd1d-4304-9a17-61b036ef9cb1"),
                            BarImageURL = "https://aplo.co/admin/web/uploads/space/oriolebar-1-yes.jpg",
                            CountryId = new Guid("0154eadb-9ce4-405a-aa3f-76934bc31b39"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9449),
                            IsDeleted = false,
                            Name = "Oriole",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("702e68ae-1eb2-494a-ba48-070ed6e7aa42"),
                            BarImageURL = "https://media.cntraveler.com/photos/5a70f846e2c45625a77b0834/master/w_767,c_limit/Broken-Shaker__2018FreehandLA_BrokenShaker4_WonhoFrankLee.jpg",
                            CountryId = new Guid("0a35f397-98e7-46bd-bfa9-7918a83289c7"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9458),
                            IsDeleted = false,
                            Name = "Broken Shaker",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7bf8b462-0a6c-4c36-8329-0518b7293066"),
                            BarImageURL = "https://wordpress.zarkov.de/wp-content/uploads/2019/09/20190908_03-Candelaria-11-Backboard-Ecke-1038x576.jpg",
                            CountryId = new Guid("20b4baa1-b931-4ca3-815e-2e925c254f96"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9472),
                            IsDeleted = false,
                            Name = "Candelaria",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("241e25fa-4604-4079-91cc-2326e62767d9"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http:/www.thespiritsbusiness.com/media/2015/11/Top-six-Europe-bars-to-visit-in-2016.jpg",
                            CountryId = new Guid("f26a722f-c5e5-4204-806b-4bf03dce219c"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9516),
                            IsDeleted = false,
                            Name = "Himkok",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b5a9c2ac-5e39-44da-85f2-bcebb3943cb4"),
                            BarImageURL = "https://www.thespiritsbusiness.com/content/http://www.thespiritsbusiness.com/media/2018/02/The-Gibson.jpg",
                            CountryId = new Guid("0154eadb-9ce4-405a-aa3f-76934bc31b39"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9525),
                            IsDeleted = false,
                            Name = "The Gibson",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("36b37d81-9c46-4bd1-8fbe-3ef1cb4a608f"),
                            BarImageURL = "https://www.worldsbestbars.com/wp-content/uploads/2018/05/bar_640_480_Black-Pearl_54b7d78180c89_5579556b49c71.jpg",
                            CountryId = new Guid("401a769f-7f8e-4f89-8008-71d27c1c2584"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9540),
                            IsDeleted = false,
                            Name = "Black Pearl",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("adbb6301-6fe6-4f0b-811b-fcfc3098f117"),
                            BarImageURL = "https://thevanderlust.com/img/op/er/operation_dagger_3_jpg_1508193462.jpg$i$min$822$530$cc$$.jpeg",
                            CountryId = new Guid("fb2e20b2-ab38-4fea-b9fb-2a1bbfd9fe61"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 18, DateTimeKind.Utc).AddTicks(9550),
                            IsDeleted = false,
                            Name = "Operation Dagger",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BarId");

                    b.HasIndex("BarId");

                    b.ToTable("BarComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("BarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarStars");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ad2539a-6324-4c53-ac8e-646cc7bf9546"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1013),
                            ImageURL = "https://s3-eu-west-1.amazonaws.com/ballantines.com/prod/DrinkToMarket/1720/hero/1/hero_1988x994.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bacardi",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("43da6832-212a-498d-a59f-1df4839004a2"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1626),
                            ImageURL = "http://saltandwind.com/media/_versions/recipes/americano-cocktail-recipe_v_medium.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Americano",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("74ee437b-98c3-4714-a5b4-dcb4f14b1ed2"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1653),
                            ImageURL = "https://unsobered.com/wp-content/uploads/2019/04/Caipiroska01-696x364.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipiroska",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("6e6c7e78-69e5-4007-917c-3cbd14cd412c"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1662),
                            ImageURL = "https://files2.hungryforever.com/wp-content/uploads/2018/03/23125131/caipirinha-cocktail.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Caipirinha",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7af7add8-1252-4235-a6b0-ab54cbfb91c5"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1669),
                            ImageURL = "https://www.bbcgoodfood.com/sites/default/files/styles/recipe/public/recipe/recipe-image/2018/08/bramble.jpg?itok=vmHp8xTV",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bramble",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("44fc9d17-ba91-48a5-b5b8-e29f7161b060"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1679),
                            ImageURL = "https://mixthatdrink.com/wp-content/uploads/2009/03/black-russian-drink-1024x1536.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Black Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("24d462d2-3a4d-4e05-a090-1946c0a9c0bb"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1688),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190816-white-russian-0119-landscape-pf-1568744178.jpg?crop=0.668xw:1.00xh;0.241xw,0&resize=980:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "White Russian",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("9e96d72c-2c93-481d-9dc6-a44d9ddfab4e"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1697),
                            ImageURL = "https://www.wickiwackiwoo.com/barracuda-cocktail-recipe/",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Barracuda",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("69f95d43-bca4-45e0-bea7-670208d86e83"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1705),
                            ImageURL = "https://media02.stockfood.com/previews/NDY2OTI4NA==/00389107-Campari-Orange.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari Orange",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("3a0eff67-9574-4c7a-b412-80ff338feff7"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1713),
                            ImageURL = "https://makemeacocktail.com/images/cocktails/6868/400_601_margarita_2_2.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Margarita",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("e22ba595-656f-4342-962c-ed6f6fae7386"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1724),
                            ImageURL = "https://www.thespruceeats.com/thmb/AHWO_swapE-OzY_e3-Ufk2YAR2s=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/negroni-cocktail-recipe-759327-6-5b3f965b46e0fb00364f8d61.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Negroni",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("b5bc1c12-205a-48ec-8832-99e0f3827e1d"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1732),
                            ImageURL = "https://www.thespruceeats.com/thmb/SZ4ZYUfFLuTxyE7QhutTS_XWgHA=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dirty-martini-cocktail-recipe-759643-15_preview-5b02f935c064710036ff4c24.jpeg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry Martini",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("c00a3a15-0770-4c75-ace7-1d1bf5abed89"),
                            AlcoholPercentage = 3.5,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1739),
                            ImageURL = "https://www.spendwithpennies.com/wp-content/uploads/2019/11/Bloody-Mary-SpendWithPennies-4.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Bloody Marry",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("0e6e473c-f96b-428e-ba03-b899d7724cb4"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1745),
                            ImageURL = "https://stevethebartender.com.au/wp-content/uploads/2014/06/manhattan-cocktail-recipe.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Manhattan",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("888b4912-a392-4ca7-907a-47f8cd333b83"),
                            AlcoholPercentage = 3.3999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1752),
                            ImageURL = "https://i1.wp.com/abarabove.com/wp-content/uploads/2020/02/P2-SingaporeSling.jpg?w=1080&ssl=1",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Singapore Sling",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("4b1d2709-4721-4efd-8477-6187f6649b04"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1759),
                            ImageURL = "https://www.artofdrink.com/wp-content/uploads/2011/02/vesper-martini-750x500.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vesper",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("933b97a0-8c11-4433-aca6-3d1cd22839b7"),
                            AlcoholPercentage = 3.7999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1767),
                            ImageURL = "https://www.liquor.com/thmb/VMoOrrQzOV00AY3rgSK6XxOR0EE=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__09__04153106__mojito-720x720-recipe-a55b114fc99c4a64b38c9ef6d1660e20.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Mojito",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("616005f7-82b1-4493-a96f-d16ff251ffd6"),
                            AlcoholPercentage = 3.8999999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1776),
                            ImageURL = "https://253qv1sx4ey389p9wtpp9sj0-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Classic_Hot_Toddy-700x461.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hot Toddy",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("ce7d249c-0aa0-4716-8cd8-f5220200c7b7"),
                            AlcoholPercentage = 4.0999999999999996,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1787),
                            ImageURL = "https://cookieandkate.com/images/2017/12/french-75-recipe-2-3-768x1151.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "French 75",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("7a678521-f662-49d4-aa5d-f740080c0a73"),
                            AlcoholPercentage = 4.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1794),
                            ImageURL = "https://www.thespruceeats.com/thmb/_Eo444fpQZYRfERGYBBwXZ0jqsw=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/vieux-carre-cocktail-recipe-761512-hero-6438e708bfe14454b9ff17168163b12a.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vieux Carre",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("f9ea85dd-0756-471a-9b9c-49a4da7c8540"),
                            AlcoholPercentage = 4.5,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1801),
                            ImageURL = "https://noseychef.com/wp-content/uploads/2018/04/hemingwaydaiquiri.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Hemingway Daiquiri",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("3b428790-b2d9-4c93-8639-fa8315f96c86"),
                            AlcoholPercentage = 7.2999999999999998,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1808),
                            ImageURL = "https://www.liquor.com/thmb/OdGMZLH9XqRF1_WzYCg8V_jvX38=/960x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/__opt__aboutcom__coeus__resources__content_migration__liquor__2018__05__08113350__bourbon-old-fashioned-720x720-recipe-ade6f7780c304999be3577e565c9bcdd.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Old Fashioned",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("72941297-c098-4e9c-952f-d9ba20c29605"),
                            AlcoholPercentage = 7.2000000000000002,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1815),
                            ImageURL = "https://ik.imagekit.io/0tvlktvw2l3s5/wp-content/uploads/2017/02/DSC_1281-1024x1024.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cherry Sazerac",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("9bdd8c29-f376-4ae2-a5fc-62c008f34bf1"),
                            AlcoholPercentage = 7.4000000000000004,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1821),
                            ImageURL = "https://media.istockphoto.com/photos/raspberry-sangria-lemonade-or-mojito-picture-id918469144",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sangria Lemonade",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("cac754b8-79c7-4260-8876-08fde3f4271c"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1828),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/easter-cocktails-1583163536.jpg?crop=1.00xw:1.00xh;0,0&resize=640:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Easter Champagne",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("1033e3d1-3c00-488b-b702-6f758184a02f"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1868),
                            ImageURL = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/orange-raspberry-mimosa-1557496595.jpg?crop=0.668xw:1.00xh;0.189xw,0.00255xh&resize=768:*",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange Raspberry Mimosa",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("78c5ab39-17cb-4c8d-a2cf-79448f96297a"),
                            AlcoholPercentage = 12.699999999999999,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1879),
                            ImageURL = "https://www.recipetineats.com/wp-content/uploads/2019/09/Tequila-Sunrise.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila Sunrise",
                            Rating = 0.0
                        },
                        new
                        {
                            Id = new Guid("261777f0-eecb-48d8-b589-eedb099a5bbf"),
                            AlcoholPercentage = 16.0,
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(1886),
                            ImageURL = "",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dole Whip Margarita",
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailComments");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailStars");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0154eadb-9ce4-405a-aa3f-76934bc31b39"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(6894),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("0a35f397-98e7-46bd-bfa9-7918a83289c7"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7454),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Stated Of America"
                        },
                        new
                        {
                            Id = new Guid("ea45f20f-f653-4318-8f5b-0c365c47f03a"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7468),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("fb2e20b2-ab38-4fea-b9fb-2a1bbfd9fe61"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7472),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("f4197526-50dd-4906-8df1-6a215a79864f"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7475),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = new Guid("1716c96b-6635-4aa4-9d8d-3a9296f73772"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7480),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("5e08eb5f-b4fd-4527-b69a-a163bd95ca5d"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7490),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("6429072f-beba-4fa1-91ed-dc51cb01b4b6"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7493),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("74d6e14c-ecfe-4125-91d1-0a1ddc0c3fe9"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7496),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("20b4baa1-b931-4ca3-815e-2e925c254f96"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7501),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("86f253e7-d84f-44bd-b565-cf70250d9849"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7504),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("f8d7cd87-fa11-4a63-b631-ba6e65ef20d6"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7508),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = new Guid("f26a722f-c5e5-4204-806b-4bf03dce219c"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7511),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("401a769f-7f8e-4f89-8008-71d27c1c2584"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 17, DateTimeKind.Utc).AddTicks(7514),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3740979d-0d6c-4652-b4fd-81bc9b116132"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(676),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Daiquiri",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("32198ff2-5058-458a-af02-c602440877f7"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1256),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Banana Juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("67af6c7f-7f60-40d6-b71c-5f9ead9696fe"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1267),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Vodka",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f661d1d4-eb82-4c58-8df2-6dc0931881d8"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1270),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Orange juice",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b594939d-7dc5-4c71-91d4-4249ac553bfc"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1274),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Whiskey",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b65a8b90-72ad-4a32-bb08-8d55a6957d2d"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1279),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("17aa3dc4-3df9-4ac5-aef0-bb1c4ac3ba73"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1293),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Gin",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4fdc63d0-da59-4233-b81f-4160ff65ed1e"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1297),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Campari",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2f141266-bbd2-460c-bcbb-c389634bab05"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1300),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Rum",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("609d3e84-bbcf-4823-980e-66453feb8ed2"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1305),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sugar syrup",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f11fb001-2a57-4bf0-a346-caa4fad7099a"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1308),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Triple sec liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c0179736-6540-4742-a71d-3a0daa2d969e"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1311),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Dry vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("0056bf57-ec5d-42a0-802a-c6817db02ab9"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1315),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Sweet vermouth",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d451b46a-5173-46bc-856b-307758dd6d52"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1318),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Tequila",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b498f89c-f90d-4c63-ad86-08f80c38bb10"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1323),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Club soda",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("506354b3-dee8-48d7-8ae1-bade984dbe7b"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1327),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cream",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fd20302e-6791-4680-a28f-f63e750c810d"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1330),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Maraschino liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e809e6a6-0481-46cd-9f6c-569cd623aa65"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1334),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Brut champagne",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("318ca90f-4b49-45a7-8fb8-6ec0dcac35cc"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1337),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Fresh mint leaves",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2f3cb341-b3e7-41b6-b39b-9fa2f3340175"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1340),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Absinthe",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("767e9892-21dc-4c23-b8ae-a7f3ac45c21b"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1344),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Amaretto liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f65137f0-39f4-4a02-9271-a150421cea85"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1347),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Milk",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1c266135-3ca0-4cc3-a1cc-6e4ffee51d51"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1352),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Cachaca",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f4c300b4-0847-43f3-947b-1523dc3ca2fe"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1355),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Ginger Ale",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("06a0747e-6dab-4ba5-8bfa-3bc8ec95de23"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1359),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Lime",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6bab563d-a189-4aa9-b552-92e9eb15baf1"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1362),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Blue curacao liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("14d9ca18-68d3-4fd2-984e-4dcbe85fe157"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1365),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Coffee liqueur",
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9027c71a-5a82-43cb-b0dd-d2473ac7ab2e"),
                            CreatedOn = new DateTime(2020, 5, 26, 5, 41, 19, 15, DateTimeKind.Utc).AddTicks(1368),
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Name = "Grapefruit juice",
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.UserProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("UserCover")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Country", "Country")
                        .WithMany("Bars")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Bars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Bars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Comments")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.BarRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Bar", "Bar")
                        .WithMany("Stars")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("BarStars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailComment", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Comments")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.CocktailRating", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("Stars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithMany("CocktailStars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Data.Entities.UserProfilePicture", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", "User")
                        .WithOne("UserPhoto")
                        .HasForeignKey("CocktailMagician.Data.Entities.UserProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
